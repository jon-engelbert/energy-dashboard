/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

 
import entity.Panel;
import entity.Client;
//import java.io.IOException;
//import java.io.PrintWriter;
import entity.Bills;
import entity.Circuit;
import entity.Endusecategory;
import entity.EndusecategoryManager;
import entity.Energy;
import entity.Financial;
import entity.Meters;
import entity.Multicircuitmeter;
import entity.Pdf;
import entity.Schedule;
import entity.Sites;
import entity.Users;
import entity.Weatherstation;
import entity.Zones;
import java.io.*;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.mail.MessagingException;
//import javax.mail.Part;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import session.BillsFacade;
import session.BillManager;
import session.SitesFacade;
import session.MetersFacade;
import session.UserManager;
import java.sql.Blob;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.servlet.http.Part;
import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialException;
import org.apache.commons.io.IOUtils;
import session.*;
//import sun.misc.IOUtils;


/**
 *
 * @author thien
 */
@WebServlet(name = "ControllerServlet",
loadOnStartup = 1,
urlPatterns = {
    "/add_building",
    "/add_building",
    "/add_circuit",
    "/add_energy",
    "/add_panel",
    "/add_schedule",
    "/add_user",
    "/add_zone",
    "/admin",
    "/alerts",
    "/bill_edit",
    "/bill_viewImg",
    "/bills",
    "/dashboard",
    "/dashboard_recalc",
    "/dashboard_recalcByBuilding",
    "/edit_zone",
    "/edit_zone_remove",
    "/edit_zone_update",
    "/edit_building",
    "/edit_building_update",
    "/edit_building_remove",
    "/edit_energy",
    "/edit_energy_update",
    "/edit_energy_remove",
    "/edit_schedule",
    "/edit_schedule_update",
    "/edit_schedule_remove",
    "/edit_user",
    "/edit_user_remove",
    "/edit_user_update",
    "/entry",
    "/getBills",
    "/getBuildingSetPoints",
    "/getMeterInfo",
    "/getMeters",
    "/graphs_addseries",
    "/graphs_addseriesbyyear",
    "/graphs_monthlyEnergyCosts",
    "/hvac",
    "/lighting",
    "/parseweather",
    "/reports",
    "/scenario",
    "/setPolicy",
    "/setup_building",
    "/setup_energy",
    "/setup_circuits",
    "/setup_entry",
    "/setup_equip",
    "/setup_limits",
    "/setup_multibranch",
    "/setup_panel",
    "/setup_schedule",
    "/setup_tenants",
    "/setup_user",
    "/setup_utility_meters",
    "/setup_zone",
    "/storeBill",
    "/tenant",
    "/test",
    "/updateCircuitBySite"
})


public class ControllerServlet extends HttpServlet {

    @EJB
    private ClientFacade clientFacade;
    @EJB
    private PanelFacade panelFacade;
    @EJB
    private ZonesFacade zonesFacade;
    @EJB
    private SitesFacade sitesFacade;
    @EJB
    private SitesManager sitesManager;
    @EJB
    private MetersFacade metersFacade;
    @EJB
    private UserManager userManager;
    @EJB
    private SitesManager siteManager;
    @EJB
    private ZoneManager zoneManager;
    @EJB
    private PdfFacade pdfFacade;
    @EJB
    private UsersFacade usersFacade;
    @EJB
    private BillsFacade billsFacade;
    @EJB
    private BillManager billManager;
    @EJB
    private pdfManager PDFmanager;
    @EJB
    private graphingManager graphingManager;
    @EJB
    private MailManager mailManager;
    @EJB
    private PanelManager panelManager;
    @EJB
    private MulticircuitmeterFacade multicircuitmeterFacade;
    @EJB
    private EquipmentFacade equipmentFacade;
    @EJB
    private EndusecategoryFacade endusecategoryFacade;
    @EJB
    private EndusecategoryManager endusecategoryManager;
    @EJB
    private CircuitManager circuitManager;
    @EJB
    private MulticircuitmeterManager multicircuitmeterManager;
    @EJB
    private EnergyFacade energyFacade;
    @EJB
    private EnergyManager energyManager;
    @EJB
    private FinancialManager financialManager;
    @EJB
    private ScheduleManager scheduleManager;
    @EJB
    private weatherManager weatherManager;
    @EJB
    private degreeDayManager degreeDayManager;
    @EJB
    private MetersManager metersManager;
    @EJB
    private FinancialFacade financialFacade;
    @EJB
    private ScheduleFacade scheduleFacade;
             
    private String userPath;
    private Meters gMeter;
    public Pdf gPdf;
    private Sites gSite;
    private Zones gZone;
    public int gClientId = 1;
    public final int gMsPerDay = 1000 * 60 * 60 * 24;
    public final int gHrsPerYr = 365 * 24;
    public final int gMsPerHr = 1000 * 60 * 60;
    public final int gBaseDiffOcc = 15;
    public final int gBaseDiffUnocc = 5;
    @Override
    public void init() throws ServletException {

//        List meterList = new ArrayList();
//        Meters currMeter;
//        meterList = metersFacade.findAll();
        List resourceList = new ArrayList();

//        Iterator<Meters> iter = meterList.iterator();
//        while (iter.hasNext() == true) {
//            currMeter = iter.next();
//            if (!resourceList.contains(currMeter.getFuelType())) {
//                resourceList.add(currMeter.getFuelType());
//            }
//        }
        resourceList.add("Electric");
        resourceList.add("Natural Gas");
        resourceList.add("Water");
        getServletContext().setAttribute("resources", resourceList);
    }

    void Setup_zone_add(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        List sitesList = new ArrayList();
        Sites currSite;
        sitesList = sitesFacade.findAll();
        request.setAttribute("sitesList", sitesList);

        List zonesList = new ArrayList();
        Zones currZone;
        zonesList = zonesFacade.findAll();
        request.setAttribute("zonesList", zonesList);
        userPath = "/WEB-INF/view/setup_zone.jsp";
    }
    
    void Setup_panel_add(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        List sitesList = new ArrayList();
        Sites currSite;
        sitesList = sitesFacade.findAll();
        request.setAttribute("sitesList", sitesList);

        List panelList = new ArrayList();
        Panel currPanel;
        panelList = panelFacade.findAll();
        request.setAttribute("panelList", panelList);
    }
    
    public Integer  GetEnergyChangeAfterIncrementLighting(Integer percentOccLight, Sites building, Energy energy, Schedule schedule) {
        Integer powerLightOccMax = energy.getLightPowerBaseOcc();
        Integer basePercentOccLight = energy.getPercentMaxLightSetting();
        Integer LightPowerOccDiff = Math.round((float) ((percentOccLight - basePercentOccLight)* powerLightOccMax)/ 100.0f);
        // ** JON ** comment-- approximately 52 weeks/year, multiply by number of occupied hours/week.
        Integer LightEnergyOccDiff = LightPowerOccDiff * 
                (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) * 52;  
        return LightEnergyOccDiff;
    }

//  where does the getOldBTUperHDD and getNewBTUperHDD come from?  If the simulation gives us the heating energy (BTU) for the year for the building, 
//    and if we can calculate the HDD for the year (e.g. use www.degreedays.net, then we get a ratio of BTU/HDD.  Same for cooling (kWH / CDD).
    public Integer  GetEnergyChangeAfterIncrementHeatingOcc(Integer newHeatOccTemp, Sites building, Energy energy, Schedule schedule, Weatherstation station) {
        float  percentOccHeat = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
        // HDDocc is the heating degree days with base temperature of the occupied setpoint-15, multiplied by the percent of the time the setpoint is at the occupied level. 
        // ** JON ** fix... this was previously set to calculate the difference between the original building model and the new building model. 
        // ** JON ** fix... now, it uses the new model for each "old" and "new" value, and the difference is purely in the setting.\
        // ** JON ** -- PROBLEM: This algorithm assumes that the HDD are distributed evenly between occupied and unoccupied hours, but in reality, it is cooler outside during unoccupied hours.
        // ** JON ** -- PROBLEM: Ideally, we'd be able to calculate HDD for just occupied hours here.  That could be an improvement in a later iteration.
        Integer HDDoccOld = Math.round((float)weatherManager.GetHDD(energy.getOrigSetpointHeatOcc()-gBaseDiffOcc, station) * percentOccHeat);    
        Integer HDDoccNew = Math.round((float)weatherManager.GetHDD(newHeatOccTemp-gBaseDiffOcc, station) * percentOccHeat);    
//        Integer baseHDDunocc = GetHDD(energy.getSetpointHeatUnocc(), building, hdd);
//        the annual heat is equal to (btu/hdd) * hdd in a year. GetHDD gives the HDD in a year already.
        Integer AnnualHeatEnergyOldOcc = energy.getNewBTUperHDD() * HDDoccOld;
        Integer AnnualHeatEnergyNewOcc = energy.getNewBTUperHDD() * HDDoccNew;

        return AnnualHeatEnergyNewOcc - AnnualHeatEnergyOldOcc;
    }

    public Integer  GetEnergyChangeAfterIncrementCoolingOcc(Integer newCoolOccTemp, Sites building, Energy energy, Schedule schedule, Weatherstation station) {
        float  percentOccCool = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
       // ** JON ** fix... this was previously set to calculate the difference between the original building model and the new building model. 
        // ** JON ** fix... now, it uses the new model for each "old" and "new" value, and the difference is purely in the setting.
        // ** JON ** -- PROBLEM: This algorithm assumes that the CDD are distributed evenly between occupied and unoccupied hours, but in reality, it is hotter outside during occupied hours.
        // ** JON ** -- PROBLEM: Ideally, we'd be able to calculate CDD for just occupied hours here.  That could be an improvement in a later iteration.
        Integer CDDoccOld = Math.round((float)weatherManager.GetCDD(energy.getOrigSetpointCoolOcc()-gBaseDiffOcc,  station) * percentOccCool);    
        Integer CDDoccNew = Math.round((float)weatherManager.GetCDD(newCoolOccTemp-gBaseDiffOcc,  station) * percentOccCool);    
        Integer AnnualCoolEnergyOldOcc = energy.getNewKwhperCDD() * CDDoccOld;
        Integer AnnualCoolEnergyNewOcc = energy.getNewKwhperCDD() * CDDoccNew;
        return AnnualCoolEnergyNewOcc - AnnualCoolEnergyOldOcc;
    }

    public Integer  GetEnergyChangeAfterIncrementCoolingUnocc(Integer newCoolUnoccTemp, Sites building, Energy energy, Schedule schedule, Weatherstation station) {
        float  percentOccCool = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
        float  percentUnoccCool = (float)1.0 - percentOccCool;
       // ** JON ** fix... this was previously set to calculate the difference between the original building model and the new building model. 
        // ** JON ** fix... now, it uses the new model for each "old" and "new" value, and the difference is purely in the setting.
        // ** JON ** -- PROBLEM: This algorithm assumes that the CDD are distributed evenly between occupied and unoccupied hours, but in reality, it is hotter outside during occupied hours.
        // ** JON ** -- PROBLEM: Ideally, we'd be able to calculate CDD for just unoccupied hours here.  That could be an improvement in a later iteration.
        Integer CDDUnoccOld = Math.round((float)weatherManager.GetCDD(energy.getOrigSetpointCoolUnocc()-gBaseDiffUnocc, station) * percentUnoccCool);    
        Integer CDDUnoccNew = Math.round((float)weatherManager.GetCDD(newCoolUnoccTemp-gBaseDiffUnocc, station) * percentUnoccCool);    
        Integer AnnualCoolEnergyOldUnocc = energy.getNewKwhperCDD() * CDDUnoccOld;
        Integer AnnualCoolEnergyNewUnocc = energy.getNewKwhperCDD() * CDDUnoccNew;
        return AnnualCoolEnergyNewUnocc - AnnualCoolEnergyOldUnocc;
    }

    public Integer  GetEnergyChangeAfterIncrementHeatingUnocc(Integer newHeatUnoccTemp, Sites building, Energy energy, Schedule schedule, Weatherstation station) {
        float  percentOccHeat = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
        float  percentUnoccHeat = (float)1.0 - percentOccHeat;
       // ** JON ** fix... this was previously set to calculate the difference between the original building model and the new building model. 
        // ** JON ** fix... now, it uses the new model for each "old" and "new" value, and the difference is purely in the setting.
        // ** JON ** -- PROBLEM: This algorithm assumes that the HDD are distributed evenly between occupied and unoccupied hours, but in reality, it is cooler outside during unoccupied hours.
        // ** JON ** -- PROBLEM: Ideally, we'd be able to calculate HDD for just unoccupied hours here.  That could be an improvement in a later iteration.
        Integer HDDUnoccOld = Math.round((float)weatherManager.GetHDD(energy.getOrigSetpointHeatUnocc() - gBaseDiffUnocc, station) * percentUnoccHeat);    
        Integer HDDUnoccNew = Math.round((float)weatherManager.GetHDD(newHeatUnoccTemp - gBaseDiffUnocc, station) * percentUnoccHeat);    
        Integer AnnualHeatEnergyOldUnocc = energy.getNewBTUperHDD() * HDDUnoccOld;
        Integer AnnualHeatEnergyNewUnocc = energy.getNewBTUperHDD() * HDDUnoccNew;
        return AnnualHeatEnergyNewUnocc - AnnualHeatEnergyOldUnocc;
    }

    private void SetPolicy (HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, ParseException {
        Integer LightVal= 0, CoolVal = 0, HeatVal = 0, CoolUOVal = 0, HeatUOVal = 0;
        String LightStr = request.getParameter("light-input");
        String HeatStr = request.getParameter("heat-input");
        String CoolStr = request.getParameter("cool-input");
        String HeatUOStr = request.getParameter("heatUO-input");
        String CoolUOStr = request.getParameter("coolUO-input");
        if (LightStr != null) 
         LightVal = Integer.parseInt(LightStr);
        if (HeatStr != null) 
         HeatVal = Integer.parseInt(HeatStr);
        if (CoolStr != null) 
         CoolVal = Integer.parseInt(CoolStr);
        if (HeatUOStr != null) 
         HeatUOVal = Integer.parseInt(HeatUOStr);
        if (CoolUOStr != null) 
         CoolUOVal = Integer.parseInt(CoolUOStr);
        Energy energy = null;
        Schedule schedule = null;
        List sitesList = new ArrayList();
        Sites site = null;
        sitesList = sitesManager.findSitesByClientId(gClientId);

        Iterator<Sites> iter = sitesList.iterator();
        while (iter.hasNext() == true) {
            site = iter.next();
            energy = energyManager.findSiteEnergyBySiteId(site.getId());
//            weatherStation = site.getWeatherStationid();
            schedule = energy.getScheduleIdschedule();
            if (!energy.getIsOverride()) {
                energy.setPercentMaxLightSetting(LightVal);
                energy.setSetpointCoolOcc(CoolVal);
                energy.setSetpointCoolUnocc(CoolUOVal);
                energy.setSetpointHeatUnocc(HeatUOVal);
                energy.setSetpointHeatOcc(HeatVal);
            }
        }
        Client client = clientFacade.find(gClientId);
        client.setPercentMaxLightSetting(LightVal);
        client.setSetpointCoolOcc(CoolVal);
        client.setSetpointCoolUnocc(CoolUOVal);
        client.setSetpointHeatUnocc(HeatUOVal);
        client.setSetpointHeatOcc(HeatVal);

        String from = "info@beigebag.com";
        String to = "thien@beigebag.com";
        String subject = "test subject";
        String msg = "testing body";
        try {
            mailManager.sendMessage(from, to, subject, msg);
        } catch (MessagingException ex) {
            Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // this function is also called by the Scenario page for the enterprise-wide settings
    private void RecalculateDashboardPaybackScenario (HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, ParseException {
        List<Integer> savingsList = new ArrayList<Integer>();
        Integer savedkWHAnnual = 0, savedBTUAnnual = 0, moneySavedAnnual = 0;
        Weatherstation weatherStation;
        Integer LightVal= 0, CoolVal = 0, HeatVal = 0, CoolUOVal = 0, HeatUOVal = 0;
        Integer savedKWH, savedBTU, savedDollars;
        String LightStr = request.getParameter("light-input");
        String HeatStr = request.getParameter("heat-input");
        String CoolStr = request.getParameter("cool-input");
        String HeatUOStr = request.getParameter("heatUO-input");
        String CoolUOStr = request.getParameter("coolUO-input");
        if (LightStr != null) 
         LightVal = Integer.parseInt(LightStr);
        if (HeatStr != null) 
         HeatVal = Integer.parseInt(HeatStr);
        if (CoolStr != null) 
         CoolVal = Integer.parseInt(CoolStr);
        if (HeatUOStr != null) 
         HeatUOVal = Integer.parseInt(HeatUOStr);
        if (CoolUOStr != null) 
         CoolUOVal = Integer.parseInt(CoolUOStr);
        

        Integer electricitySavings = 0;
        Integer gasSavings = 0;
        Energy energy = null;
        Schedule schedule = null;
// ** JON ** - comment: First, modify the changed setting for the enterprise (client).
        Client client = clientFacade.find(gClientId);
//        if (changeTypeStr.equals("light-input")) {
//            energy.setPercentMaxLightSettingTemp(changeVal);
//        } else if (changeTypeStr.equals("heat-input")) {
//            energy.setSetpointHeatOccTemp(changeVal);
//        } else if (changeTypeStr.equals("cool-input")) {
//            energy.setSetpointCoolOccTemp(changeVal);
//        } else if (changeTypeStr.equals("heatUO-input")) {
//            energy.setSetpointHeatUnoccTemp(changeVal);
//        } else if (changeTypeStr.equals("coolUO-input")) {
//            energy.setSetpointCoolUnoccTemp(changeVal);
//        }
// ** JON ** - comment: Then, modify the appropriate setting for each building (site), unless that site explicitly overrides the enterprise settings.
        List sitesList = new ArrayList();
        Sites site = null;
        sitesList = sitesManager.findSitesByClientId(gClientId);
        Iterator<Sites> iter = sitesList.iterator();
        while (iter.hasNext() == true) {
            site = iter.next();
            energy = energyManager.findSiteEnergyBySiteId(site.getId());
            weatherStation = site.getWeatherStationid();
            schedule = energy.getScheduleIdschedule();
//                if (changeTypeStr.equals("light-input")) {
//                    energy.setPercentMaxLightSettingTemp(changeVal);
//                } else if (changeTypeStr.equals("heat-input")) {
//                    energy.setSetpointHeatOccTemp(changeVal);
//                } else if (changeTypeStr.equals("cool-input")) {
//                    energy.setSetpointCoolOccTemp(changeVal);
//                } else if (changeTypeStr.equals("heatUO-input")) {
//                    energy.setSetpointHeatUnoccTemp(changeVal);
//                } else if (changeTypeStr.equals("coolUO-input")) {
//                    energy.setSetpointCoolUnoccTemp(changeVal);
//                }
            if (!energy.getIsOverride()) {
                electricitySavings -= GetEnergyChangeAfterIncrementLighting(LightVal, site, energy, schedule);
                electricitySavings -= GetEnergyChangeAfterIncrementCoolingOcc(CoolVal, site, energy, schedule, weatherStation);
                electricitySavings -= GetEnergyChangeAfterIncrementCoolingUnocc(CoolUOVal, site, energy, schedule, weatherStation);
                gasSavings -= GetEnergyChangeAfterIncrementHeatingOcc(HeatVal, site, energy, schedule, weatherStation);
                gasSavings -= GetEnergyChangeAfterIncrementHeatingUnocc(HeatUOVal, site, energy, schedule, weatherStation);
            }
            // ** JON ** -- what if there is an override for a building.... should the program ask if the user wants to "override" the override and accept these new values?
        }


        Financial finances = financialManager.findFinancialByClientId(gClientId);

        //Integer predictedMoneySaved = (int) (finances.getPricePerBTU() * (finances.getSavingsToDateGas() + gasSavings));
        //predictedMoneySaved += (int) (finances.getPricePerKWh() * (finances.getSavingsToDateElectric() + electricitySavings));
        // JON:  Just tally the 'additional' money saved
        NumberFormat usFormat = NumberFormat.getInstance(Locale.US);
        Integer predictedMoneySaved = (int) (finances.getPricePerBTU() * gasSavings);
        predictedMoneySaved += (int) (finances.getPricePerKWh() * electricitySavings);
        String predictedMoneySavedStr = "$" + usFormat.format(predictedMoneySaved).toString();

    //            usFormat = NumberFormat.getIntegerInstance(Locale.US);
    //            String gasSavingsStr = usFormat.format(gasSavings);
    //            String electricitySavingsStr = usFormat.format(electricitySavings);

        savingsList = CalcSavingsToNowFromBills(client);
        savedKWH = (Integer) savingsList.get(0);
        savedBTU = (Integer) savingsList.get(1);
        savedDollars =  (Integer) savingsList.get(2);

        savingsList = CalcAnnualSavingsByCddHdd (client); 
        savedkWHAnnual = savingsList.get(0) + electricitySavings;
        savedBTUAnnual = savingsList.get(1) + gasSavings;
        moneySavedAnnual = savingsList.get(2) + predictedMoneySaved;
        Date paybackDate = calcPaybackDate(finances, savedKWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual);
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

        String predictedEndDate = dateFormat.format(paybackDate);
        if (PaybackDateIsInfinite(finances, savedKWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual))
            predictedEndDate = "Infinite";
         response.setContentType("text/plain");
         PrintWriter out = response.getWriter();

         out.println("scenario_paybackdate:" + predictedEndDate + ";scenario_moneysaved:" + predictedMoneySavedStr + ";scenario_elecsaved:" + electricitySavings + ";scenario_gassaved:" + gasSavings + ";");

         out.flush();
         out.close();
    }
    
    private void RecalculatePaybackScenarioByBuilding (HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, ParseException {
        List<Integer> savingsList = new ArrayList<Integer>();
        Integer savedkWHAnnual = 0, savedBTUAnnual = 0, moneySavedAnnual = 0;
        Weatherstation weatherStation;
        Integer siteId = 0, LightVal= 0, CoolVal = 0, HeatVal = 0, CoolUOVal = 0, HeatUOVal = 0;
        Integer savedKWH, savedBTU, savedDollars;
        String siteIdStr = request.getParameter("siteId");
        String LightStr = request.getParameter("light-input");
        String HeatStr = request.getParameter("heat-input");
        String CoolStr = request.getParameter("cool-input");
        String HeatUOStr = request.getParameter("heatUO-input");
        String CoolUOStr = request.getParameter("coolUO-input");
        if (LightStr != null) 
         LightVal = Integer.parseInt(LightStr);
        if (HeatStr != null) 
         HeatVal = Integer.parseInt(HeatStr);
        if (CoolStr != null) 
         CoolVal = Integer.parseInt(CoolStr);
        if (HeatUOStr != null) 
         HeatUOVal = Integer.parseInt(HeatUOStr);
        if (CoolUOStr != null) 
         CoolUOVal = Integer.parseInt(CoolUOStr);
        if (siteIdStr != null)
            siteId = Integer.parseInt(siteIdStr);
        
        Sites site = sitesFacade.find(siteId);
        
        Integer electricitySavings = 0;
        Integer gasSavings = 0;
        Energy energy = null;
        Schedule schedule = null;
// ** JON ** - comment: First, modify the changed setting for the enterprise (client).
        Client client = clientFacade.find(gClientId);

// ** JON ** - comment: Then, modify the appropriate setting for each building (site), unless that site explicitly overrides the enterprise settings.
        energy = energyManager.findSiteEnergyBySiteId(siteId);
        weatherStation = site.getWeatherStationid();
        schedule = energy.getScheduleIdschedule();
        if (!energy.getIsOverride()) {
            electricitySavings -= GetEnergyChangeAfterIncrementLighting(LightVal, site, energy, schedule);
            electricitySavings -= GetEnergyChangeAfterIncrementCoolingOcc(CoolVal, site, energy, schedule, weatherStation);
            electricitySavings -= GetEnergyChangeAfterIncrementCoolingUnocc(CoolUOVal, site, energy, schedule, weatherStation);
            gasSavings -= GetEnergyChangeAfterIncrementHeatingOcc(HeatVal, site, energy, schedule, weatherStation);
            gasSavings -= GetEnergyChangeAfterIncrementHeatingUnocc(HeatUOVal, site, energy, schedule, weatherStation);
        }
        // ** JON ** -- what if there is an override for a building.... should the program ask if the user wants to "override" the override and accept these new values?


        Financial finances = financialManager.findFinancialByClientId(gClientId);

        // JON:  Just tally the 'additional' money saved
        NumberFormat usFormat = NumberFormat.getInstance(Locale.US);
        Integer predictedMoneySaved = (int) (finances.getPricePerBTU() * gasSavings);
        predictedMoneySaved += (int) (finances.getPricePerKWh() * electricitySavings);
        String predictedMoneySavedStr = "$" + usFormat.format(predictedMoneySaved).toString();

        savingsList = CalcSavingsToNowFromBills(client);
        savedKWH = (Integer) savingsList.get(0);
        savedBTU = (Integer) savingsList.get(1);
        savedDollars =  (Integer) savingsList.get(2);

        savingsList = CalcAnnualSavingsByCddHdd (client); 
        savedkWHAnnual = savingsList.get(0) + electricitySavings;
        savedBTUAnnual = savingsList.get(1) + gasSavings;
        moneySavedAnnual = savingsList.get(2) + predictedMoneySaved;
        Date paybackDate = calcPaybackDate(finances, savedKWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual);
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

        String predictedEndDate = dateFormat.format(paybackDate);
        if (PaybackDateIsInfinite(finances, savedKWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual))
            predictedEndDate = "Infinite";
         response.setContentType("text/plain");
         PrintWriter out = response.getWriter();

         out.println("scenario_paybackdate:" + predictedEndDate + ";scenario_moneysaved:" + predictedMoneySavedStr + ";scenario_elecsaved:" + electricitySavings + ";scenario_gassaved:" + gasSavings + ";");

         out.flush();
         out.close();
    }
    
    private List  CalcSavingsToNowByCddHdd (Client client)
     {
        List<Integer> list = new ArrayList<Integer>();
        Sites currSite = new Sites();
        Integer electricitySavings = 0;
        Integer gasSavings = 0;
        String airportCode = null;
        String[] result = null;
        String hdd = new String();
        String cdd = new String();
        int cddToDate = 0;
        int hddToDate = 0;
        int oldBtuPerHdd = 0;
        int oldKwhPerCdd = 0;
        int oldOtherBtuPerYr = 0;
        int oldOtherKwhPerYr = 0;
        int newBtuPerHdd = 0;
        int newKwhPerCdd = 0;
        int newOtherBtuPerYr = 0;
        int newOtherKwhPerYr = 0;
        float occupiedFraction = 0f;
        int oldLightOccKwh = 0;
        int newLightOccKwh = 0;
        int origHddOcc = 0, newHddOcc = 0;
        int origCddOcc = 0, newCddOcc = 0;
        int origHddUnocc = 0, newHddUnocc = 0;
        int origCddUnocc = 0, newCddUnocc = 0;
        float kwhSaved = 0.0f;
        float btuSaved = 0.0f;
        float moneySaved = 0.0f;

        client = clientFacade.find(gClientId);

        Financial finances = financialManager.findFinancialByClientId(gClientId);
        float pricePerKwh = finances.getPricePerKWh();
        float pricePerBtu = finances.getPricePerBTU();
        Calendar calendar = Calendar.getInstance();
        Date endDate = new Date();
        Date startDate = finances.getSavingsCalcDate();
        float hoursElapsed = (endDate.getTime() - startDate.getTime()) / (gMsPerHr);
        float yearsElapsed = hoursElapsed / gHrsPerYr;
        
        // getting the $ saved
        Integer moneySavedToDate = (int) (finances.getPricePerBTU() * finances.getSavingsToDateGas());
        moneySavedToDate += (int) (finances.getPricePerKWh() * finances.getSavingsToDateElectric());
        NumberFormat usFormat = NumberFormat.getInstance(Locale.US);
        String moneySavedToDateStr = "$" + usFormat.format(moneySavedToDate).toString();

        // getting the payback date, BTU and Wh saved.
//        Date paybackDate = calcPaybackDate(finances, electricitySavings, gasSavings);
//        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//        String paybackDateStr = dateFormat.format(paybackDate);

        List sitesList = sitesManager.findSitesByClientId(gClientId);
        Iterator <Sites> iterSites = sitesList.iterator();
        
        while (iterSites.hasNext() == true) {
            currSite = iterSites.next();
            startDate = currSite.getStartDate();
            Weatherstation weatherstation = currSite.getWeatherStationid();
            airportCode = weatherstation.getName();
            Energy currEnergy = energyManager.findSiteEnergyBySiteId(currSite.getId());
            try {
                origHddOcc = weatherManager.getHddFromAirportCode(currEnergy.getOrigSetpointHeatOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                newHddOcc = weatherManager.getHddFromAirportCode(currEnergy.getSetpointHeatOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                origHddUnocc = weatherManager.getHddFromAirportCode(currEnergy.getOrigSetpointHeatUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                newHddUnocc = weatherManager.getHddFromAirportCode(currEnergy.getSetpointHeatUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                origCddOcc = weatherManager.getCddFromAirportCode(currEnergy.getOrigSetpointCoolOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                newCddOcc = weatherManager.getCddFromAirportCode(currEnergy.getSetpointCoolOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                origCddUnocc = weatherManager.getCddFromAirportCode(currEnergy.getOrigSetpointCoolUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                newCddUnocc = weatherManager.getCddFromAirportCode(currEnergy.getSetpointCoolUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                //result = weatherManager.getHddCddfromAirportCode(startDate, endDate, airportCode);
            } catch (IOException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
            hdd = result[0].split(":")[1];
            cdd = result[1].split(":")[1];
            
            // at some point, hddToDate and cddToDate should be saved to the 'Energy' table for each site.
            Schedule schedule = currEnergy.getScheduleIdschedule();
            float  percentOcc = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
            float  percentUnocc = 1.0f - percentOcc;
 
            oldBtuPerHdd = currEnergy.getOldBTUperHDD();
            oldKwhPerCdd = currEnergy.getOldKWHperCDD();
            oldOtherBtuPerYr = currEnergy.getOldOtherBTU();
            oldOtherKwhPerYr = currEnergy.getOldOtherKwh();
            newBtuPerHdd = currEnergy.getNewBTUperHDD();
            newKwhPerCdd = currEnergy.getNewKwhperCDD();
            newOtherBtuPerYr = currEnergy.getNewOtherBTU();
            newOtherKwhPerYr = currEnergy.getNewOtherKwh();
            oldLightOccKwh = (int) (currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightOriginal() * occupiedFraction * hoursElapsed);
            newLightOccKwh = (int) (currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightSetting() * occupiedFraction * hoursElapsed);
            Integer oldCoolOccKwh = Math.round(oldKwhPerCdd * origCddOcc * percentOcc);
            Integer newCoolOccKwh = Math.round(newKwhPerCdd * newCddOcc * percentOcc);
            Integer oldHeatOccBTU = Math.round(oldBtuPerHdd * origHddOcc * percentOcc);
            Integer newHeatOccBTU = Math.round(newBtuPerHdd * newHddOcc * percentOcc);            
            Integer oldCoolUnoccKwh = Math.round(oldKwhPerCdd * origCddUnocc * percentUnocc);
            Integer newCoolUnoccKwh = Math.round(newKwhPerCdd * newCddUnocc * percentUnocc);
            Integer oldHeatUnoccBTU = Math.round(oldBtuPerHdd * origHddUnocc * percentUnocc);
            Integer newHeatUnoccBTU = Math.round(newBtuPerHdd * newHddUnocc * percentUnocc);            
            
            kwhSaved += (oldCoolOccKwh - newCoolOccKwh) + (oldCoolUnoccKwh - newCoolUnoccKwh) + (oldOtherKwhPerYr - newOtherKwhPerYr) * yearsElapsed + (oldLightOccKwh - newLightOccKwh);
            btuSaved += (oldHeatOccBTU - newHeatOccBTU) + (oldHeatUnoccBTU - newHeatUnoccBTU) + (oldOtherBtuPerYr - newOtherBtuPerYr) * yearsElapsed;
            
            moneySaved += kwhSaved * pricePerKwh + btuSaved * pricePerBtu;
            
//            List metersList = metersManager.findMetersBySiteId(currSite.getId());
//            Iterator <Meters> iterMeters = metersList.iterator();
//            while (iterMeters.hasNext() == true) {
//                Meters currMeter = iterMeters.next();
//            }
        }
        
//        Date dateNow = new Date();
//        Date startDateFinancial = finances.getStartDate();
//        float diffDaysStartTilNow = (dateNow.getTime() - startDateFinancial.getTime()) / gMsPerDay;
//        Integer whSavedPerDay = ((int) kwhSaved * 1000)  / (int) diffDaysStartTilNow;
//        Integer btuSavedPerDay = (int) btuSaved / (int) diffDaysStartTilNow;
//        float diffDaysStartTilPredEnd = ( paybackDate.getTime() - startDateFinancial.getTime() ) / gMsPerDay;
//        Integer predSavedWh = (int) diffDaysStartTilPredEnd * whSavedPerDay;
//        Integer predSavedBTU = (int) diffDaysStartTilPredEnd * btuSavedPerDay;
//        Integer moneySavedPred = (int) (predSavedWh * finances.getPricePerKWh() + predSavedBTU * finances.getPricePerBTU());           
        list.add((int)kwhSaved);
        list.add((int)btuSaved);
        list.add((int)moneySaved);
        
        return list;
    }

    private List  CalcPredictedSavingsByCddHdd (Client client, Date startDate, Date endDate, int oldKwh, int oldBTU)
     {
        List<Integer> list = new ArrayList<Integer>();
        Sites currSite = new Sites();
        Integer electricitySavings = 0;
        Integer gasSavings = 0;
        String airportCode = null;
        String[] result = null;
//        String hdd = new String();
//        String cdd = new String();
        int cddToDate = 0;
        int hddToDate = 0;
//        int oldBtuPerHdd = 0;
//        int oldKwhPerCdd = 0;
//        int oldOtherBtuPerYr = 0;
//        int oldOtherKwhPerYr = 0;
        int newBtuPerHdd = 0;
        int newKwhPerCdd = 0;
        int newOtherBtuPerYr = 0;
        int newOtherKwhPerYr = 0;
        float occupiedFraction = 0f;
//        int oldLightOccKwh = 0;
        int newLightOccKwh = 0;
//        int origHddOcc = 0;
        int newHddOcc = 0;
//        int origCddOcc = 0;
        int newCddOcc = 0;
//        int origHddUnocc = 0;
        int newHddUnocc = 0;
//        int origCddUnocc = 0
        int newCddUnocc = 0;
        int kwhDiff = 0;
        int btuDiff = 0;
        int moneyDiff = 0;

        client = clientFacade.find(gClientId);

        Financial finances = financialManager.findFinancialByClientId(gClientId);
        float pricePerKwh = finances.getPricePerKWh();
        float pricePerBtu = finances.getPricePerBTU();
        Calendar calendar = Calendar.getInstance();
        float hoursElapsed = (endDate.getTime() - startDate.getTime()) / (gMsPerHr);
        float yearsElapsed = hoursElapsed / gHrsPerYr;
        

        List sitesList = sitesManager.findSitesByClientId(gClientId);
        Iterator <Sites> iterSites = sitesList.iterator();
        
        while (iterSites.hasNext() == true) {
            currSite = iterSites.next();
            startDate = currSite.getStartDate();
            Weatherstation weatherstation = currSite.getWeatherStationid();
            airportCode = weatherstation.getName();
            Energy currEnergy = energyManager.findSiteEnergyBySiteId(currSite.getId());
            try {
//                origHddOcc = weatherManager.getHddFromAirportCode(currEnergy.getOrigSetpointHeatOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                newHddOcc = weatherManager.getHddFromAirportCode(currEnergy.getSetpointHeatOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
//                origHddUnocc = weatherManager.getHddFromAirportCode(currEnergy.getOrigSetpointHeatUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                newHddUnocc = weatherManager.getHddFromAirportCode(currEnergy.getSetpointHeatUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
//                origCddOcc = weatherManager.getCddFromAirportCode(currEnergy.getOrigSetpointCoolOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
                newCddOcc = weatherManager.getCddFromAirportCode(currEnergy.getSetpointCoolOcc() - gBaseDiffOcc, startDate, endDate, weatherstation);
//                origCddUnocc = weatherManager.getCddFromAirportCode(currEnergy.getOrigSetpointCoolUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                newCddUnocc = weatherManager.getCddFromAirportCode(currEnergy.getSetpointCoolUnocc() - gBaseDiffUnocc, startDate, endDate, weatherstation);
                //result = weatherManager.getHddCddfromAirportCode(startDate, endDate, airportCode);
            } catch (IOException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
//            hdd = result[0].split(":")[1];
//            cdd = result[1].split(":")[1];
            
            // at some point, hddToDate and cddToDate should be saved to the 'Energy' table for each site.
            Schedule schedule = currEnergy.getScheduleIdschedule();
            float  percentOcc = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
            float  percentUnocc = 1.0f - percentOcc;
 
//            oldBtuPerHdd = currEnergy.getOldBTUperHDD();
//            oldKwhPerCdd = currEnergy.getOldKWHperCDD();
//            oldOtherBtuPerYr = currEnergy.getOldOtherBTU();
//            oldOtherKwhPerYr = currEnergy.getOldOtherKwh();
            newBtuPerHdd = currEnergy.getNewBTUperHDD();
            newKwhPerCdd = currEnergy.getNewKwhperCDD();
            newOtherBtuPerYr = currEnergy.getNewOtherBTU();
            newOtherKwhPerYr = currEnergy.getNewOtherKwh();
//            oldLightOccKwh = (int) (currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightOriginal() * occupiedFraction * hoursElapsed);
            newLightOccKwh = (int) (currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightSetting() * occupiedFraction * hoursElapsed);
//            Integer oldCoolOccKwh = Math.round(oldKwhPerCdd * origCddOcc * percentOcc);
            Integer newCoolOccKwh = Math.round(newKwhPerCdd * newCddOcc * percentOcc);
//            Integer oldHeatOccBTU = Math.round(oldBtuPerHdd * origHddOcc * percentOcc);
            Integer newHeatOccBTU = Math.round(newBtuPerHdd * newHddOcc * percentOcc);            
//            Integer oldCoolUnoccKwh = Math.round(oldKwhPerCdd * origCddUnocc * percentUnocc);
            Integer newCoolUnoccKwh = Math.round(newKwhPerCdd * newCddUnocc * percentUnocc);
//            Integer oldHeatUnoccBTU = Math.round(oldBtuPerHdd * origHddUnocc * percentUnocc);
            Integer newHeatUnoccBTU = Math.round(newBtuPerHdd * newHddUnocc * percentUnocc);            
            
            kwhDiff = oldKwh - (newCoolOccKwh + newCoolUnoccKwh + newLightOccKwh + Math.round(newOtherKwhPerYr * yearsElapsed));
            btuDiff = oldBTU - (newHeatOccBTU + newHeatUnoccBTU + Math.round(newOtherBtuPerYr * yearsElapsed));
            
            moneyDiff += kwhDiff * pricePerKwh + btuDiff * pricePerBtu;
            
//            List metersList = metersManager.findMetersBySiteId(currSite.getId());
//            Iterator <Meters> iterMeters = metersList.iterator();
//            while (iterMeters.hasNext() == true) {
//                Meters currMeter = iterMeters.next();
//            }
        }
        
//        Date dateNow = new Date();
//        Date startDateFinancial = finances.getStartDate();
//        float diffDaysStartTilNow = (dateNow.getTime() - startDateFinancial.getTime()) / gMsPerDay;
//        Integer whSavedPerDay = ((int) kwhSaved * 1000)  / (int) diffDaysStartTilNow;
//        Integer btuSavedPerDay = (int) btuSaved / (int) diffDaysStartTilNow;
//        float diffDaysStartTilPredEnd = ( paybackDate.getTime() - startDateFinancial.getTime() ) / gMsPerDay;
//        Integer predSavedWh = (int) diffDaysStartTilPredEnd * whSavedPerDay;
//        Integer predSavedBTU = (int) diffDaysStartTilPredEnd * btuSavedPerDay;
//        Integer moneySavedPred = (int) (predSavedWh * finances.getPricePerKWh() + predSavedBTU * finances.getPricePerBTU());           
        list.add((int)kwhDiff);
        list.add((int)btuDiff);
        list.add((int)moneyDiff);
        
        return list;
    }

    // ** JON ** - comment - SetupDashboardPage should set the initial slider values, and fill in the initial values for the savings to date and the payback end-date.
    private void SetupDashboardPage (HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException, ParseException {
        List<Integer> savingsList = new ArrayList<Integer>();

        Integer savedkWH = 0;
        Integer savedBTU = 0;
//        Integer electricitySavings = 0;
//        Integer gasSavings = 0;
        Integer savedDollars = 0;
        Integer savedkWHAnnual = 0, savedBTUAnnual = 0, moneySavedAnnual = 0;
        Sites currSite = new Sites();
        Client client = new Client();
        client = clientFacade.find(gClientId);
        Financial finances = financialManager.findFinancialByClientId(client.getIdClient());
        Integer moneySavedToDate = 0;
        // ** JON ** - bug: There should really be a finances field to store the DollarSavingsToDate-- this is for the savings outside of the real/fake bills savings.
        moneySavedToDate = (int) (finances.getPricePerBTU() * finances.getSavingsToDateGas());
        moneySavedToDate += (int) (finances.getPricePerKWh() * finances.getSavingsToDateElectric());
        
        savingsList = CalcSavingsToNowFromBills(client);
        savedkWH = (Integer) savingsList.get(0);
        savedBTU = (Integer) savingsList.get(1);
        savedDollars =  (Integer) savingsList.get(2);
// ** JON **: BUG:  For the mostRecentCalcDate, get the end-date of the most recent bill        
// ... actually, it should be the end date of the most recent real/fake bill pair.
        //TODO: rewrite to loop through each building and each meter and return the "average" last date of the bills
        Date mostRecentCalcDate = CalcMostRecentBillEndDate(client);     

//        moneySavedToDate = (int) (finances.getPricePerBTU() * savedBTU);
//        moneySavedToDate += (int) (finances.getPricePerKWh() * savedkWH);
        moneySavedToDate += (int) savedDollars;   // add the dollars saved from the bills to the dollars saved initially.
        NumberFormat usFormat = NumberFormat.getInstance(Locale.US);
        String moneySavedToDateStr = "$" + usFormat.format(moneySavedToDate).toString();
        
        //calculating the predicted savings
        // for this, use the new building model, the old building model, and the typical annual HDD/CDD values.
        savingsList = CalcAnnualSavingsByCddHdd (client); 
        savedkWHAnnual = savingsList.get(0);
        savedBTUAnnual = savingsList.get(1);
        moneySavedAnnual = savingsList.get(2);
        Date dateNow = new Date();
//        Date startDateFinancial = finances.getStartDate();
//        float diffDaysStartTilNow = (dateNow.getTime() - startDateFinancial.getTime()) / gMsPerDay;
//        Integer kwhSavedPerDay = (int) savedkWH / (int) diffDaysStartTilNow;
//        Integer btuSavedPerDay = (int) savedBTU / (int) diffDaysStartTilNow;
        Date paybackDate = calcPaybackDate(finances, savedkWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual);
//        paybackDate = sdf.format(c.getTime());  // dt is now the new date
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        String paybackDateStr = dateFormat.format(paybackDate);
        if (PaybackDateIsInfinite(finances, savedkWH, savedBTU, savedDollars, savedkWHAnnual, savedBTUAnnual, moneySavedAnnual))
            paybackDateStr = "Infinite";
        
//        float diffDaysStartTilPredEnd = ( paybackDate.getTime() - startDateFinancial.getTime() ) / gMsPerDay;
//        Integer predSavedWh = (int) diffDaysStartTilPredEnd * kwhSavedPerDay;
//        Integer predSavedBTU = (int) diffDaysStartTilPredEnd * btuSavedPerDay;
//        Integer moneySavedPred = (int) (predSavedWh * finances.getPricePerKWh() + predSavedBTU * finances.getPricePerBTU());           

        // outputting to the JSP page
        usFormat = NumberFormat.getIntegerInstance(Locale.US);
        String savedWHStr = usFormat.format(savedkWH).toString();
        String savedBTUStr = usFormat.format(savedBTU).toString();
        String savedPredWHStr = "0";    // usFormat.format(predSavedWh).toString();
        String savedPredBTUStr = "0";   // usFormat.format(predSavedBTU).toString();
        String moneySavedPredStr = "0"; // usFormat.format(moneySavedPred).toString();

        request.setAttribute("setpoints", client);
        request.setAttribute("savedWhTD", savedWHStr);
        request.setAttribute("savedPredWh", savedPredWHStr);
        request.setAttribute("savedPredBTU", savedPredBTUStr);
        request.setAttribute("savedBtuTD", savedBTUStr);
        request.setAttribute("endDate", paybackDateStr);
        request.setAttribute("moneySavedTD", moneySavedToDateStr);
        request.setAttribute("moneySavedPred", moneySavedPredStr);
        userPath = "/WEB-INF/view/dashboard.jsp";
    }
    
    private Date CalcMostRecentBillEndDate(Client client) {
        Date endDateAvg = new Date();
        Date tempDate = new Date();
        long tempDateMS = 0;
        int count = 0;
        
        Sites currSite = new Sites();
        
        List sitesList = sitesManager.findSitesByClientId(client.getIdClient());
        Iterator <Sites> iterSites = sitesList.iterator();
        while (iterSites.hasNext() == true) {
            currSite = iterSites.next();

            List metersList = metersManager.findMetersBySiteId(currSite.getId());
            Iterator <Meters> iterMeters = metersList.iterator();
            while (iterMeters.hasNext() == true) {
                Meters currMeter = iterMeters.next();

                try {
                    tempDate = billManager.getLastBillDate(currMeter);
                    tempDateMS += tempDate.getTime();
                    count ++;
                } catch (Exception e) {
                    String error = e.toString();
                }
            }
        }
        tempDateMS = tempDateMS / count;
        endDateAvg = new Date(tempDateMS);
        return endDateAvg;
    }
    
    private Date CalcMostRecentBillEndDate(Sites site) {
        Date endDateAvg = new Date();
        Date tempDate = new Date();
        long tempDateMS = 0;
        int count = 0;
        
        List metersList = metersManager.findMetersBySiteId(site.getId());
        Iterator <Meters> iterMeters = metersList.iterator();
        while (iterMeters.hasNext() == true) {
            Meters currMeter = iterMeters.next();

            try {
                tempDate = billManager.getLastBillDate(currMeter);
                tempDateMS += tempDate.getTime();
                count ++;
            } catch (Exception e) {
                String error = e.toString();
            }
        }
        tempDateMS = tempDateMS / count;
        endDateAvg = new Date(tempDateMS);
        return endDateAvg;
    }

    private List CalcSavingsToNowFromBills (Client client)  {
        List<Integer> list = new ArrayList<Integer>();

        Sites currSite = new Sites();
        Financial finances = financialManager.findFinancialByClientId(client.getIdClient());
//        Integer electricitySavings = 0;
//        Integer gasSavings = 0;

        float sumFake = 0.0f;       // this is the sum of the "amounts" which are kwh (or wh?) for electricity, btus (or ccf?) for natural gas.
        // **JON **-- bug:  we need to standardize on units, and force the user to enter consistent units (or convert ourselves) for natural gas.
        float sumReal = 0.0f;
        Integer sumDollarsFake = 0, sumDollarsReal = 0;
        float savedDollars = 0.0f;
        float savedkWH = 0.0f;
        float savedBTU = 0.0f;
        Calendar calendar = Calendar.getInstance();
        Date endDateBills = new Date();
        Date startDateBills = finances.getSavingsCalcDate();
        float hoursElapsed = (endDateBills.getTime() - startDateBills.getTime()) / (gMsPerHr);
        float yearsElapsed = hoursElapsed / gHrsPerYr;
        // ** JON **- the savings to date are specified for the savings from the contract start date up to the SavingsCalcDate.  So use the bills from dates after that date.

        List sitesList = sitesManager.findSitesByClientId(gClientId);
        Iterator <Sites> iterSites = sitesList.iterator();
        while (iterSites.hasNext() == true) {
            currSite = iterSites.next();

            List metersList = metersManager.findMetersBySiteId(currSite.getId());
            Iterator <Meters> iterMeters = metersList.iterator();
            while (iterMeters.hasNext() == true) {
                Meters currMeter = iterMeters.next();

                try {
                    sumFake = billManager.sumBillAmountsByMeterId(currMeter.getId(), startDateBills, endDateBills, true);
                    sumReal = billManager.sumBillAmountsByMeterId(currMeter.getId(), startDateBills, endDateBills, false);
                    sumDollarsFake = billManager.sumBillDollarsByMeterId(currMeter.getId(), startDateBills, endDateBills, true);
                    sumDollarsReal = billManager.sumBillDollarsByMeterId(currMeter.getId(), startDateBills, endDateBills, false);
                } catch (Exception e) {
                    String error = e.toString();
                }
                if (currMeter.getFuelType().equalsIgnoreCase("electric")) {
                    savedkWH += sumFake - sumReal;
                }
                if (currMeter.getFuelType().equalsIgnoreCase("natural gas")) {
                    savedBTU += sumFake - sumReal;
                }
                savedDollars += (sumDollarsFake - sumDollarsReal);
            }
        }

        list.add((int)savedkWH);
        list.add((int)savedBTU);
        list.add((int)savedDollars);
        
        return list;
    }
        // updating the database with the latest savings and dates
//        financialManager.updateFinances(finances.getIdtable1(), savedWH, savedBTU, endDateBills);
        // ** JON** - Comment: I think it's easier to just recalculate these every time, i.e. don't try overwriting the values that the user has specified for the INITIAL savings.

//    public Date  calcPaybackDate(Client client, Financial finances, Date today) {
//        List<Integer> savingsList = new ArrayList<Integer>();
//        Date elapsed;
//        Integer expToDate, expAnnual, savingsAnnual, savingsPreviousElectric, savingsPreviousGas;
//        Integer extraDays;
//        //GregorianCalendar extraTime;
//        Date paybackDate;
//        //Date paybackDate;
//        Time testTime;
//        float savingsToDateFloat;
//        float extraYearsFloat;
//        float savingsAnnualFloat;
//        Integer savedDollars = 0;
//        Integer savedkWH = 0;
//        Integer savedBTU = 0;
//        expToDate = finances.getFixedExpense();
//        savingsPreviousElectric = finances.getSavingsToDateElectric();
//        savingsPreviousGas = finances.getSavingsToDateGas();
//        savingsToDateFloat = savingsPreviousElectric * finances.getPricePerKWh() + savingsPreviousGas * finances.getPricePerBTU();
//        savingsList = CalcSavingsToNowFromBills (client);
//        savedkWH = savingsList.get(0);
//        savedBTU = savingsList.get(1);
//        savedDollars =  savingsList.get(2);
//
//        savingsToDateFloat += savedDollars;
//        savingsAnnualFloat = finances.getAnnualElectricSavings() * finances.getPricePerKWh() + finances.getAnnualGasSavings() * finances.getPricePerBTU();
//        // JON: For a more accurate annual savings calculation, use the "per building" energy parameters in the energy tables, and hdd/cdd, etc.
//        expAnnual = finances.getAnnualExpense();
//        savingsAnnual = (int) savingsAnnualFloat;
//        extraYearsFloat = (expToDate - savingsToDateFloat) / (savingsAnnual - expAnnual);
//        extraDays = (int) (extraYearsFloat /365);
//        
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        Calendar c = Calendar.getInstance();
//        c.setTime(finances.getSavingsCalcDate());
//        c.add(Calendar.DATE, extraDays);  // number of days to add
////        paybackDate = sdf.format(c.getTime());  // dt is now the new date
//        paybackDate = c.getTime();
//
//        return paybackDate;
//    }

    public Date  calcPaybackDate(Financial finances, Integer savingsPreviousElectric, Integer savingsPreviousGas, Integer savingsPreviousDollars, Integer annualElectricSavings, Integer annualGasSavings, Integer dollarSavings) {
        Date elapsed;
        Integer expToDate, savingsToDate, expAnnual;
        Integer extraDays;
        //GregorianCalendar extraTime;
        Date paybackDate;
        //Date paybackDate;
        Time testTime;
        float extraYearsFloat;
        float savingsAnnualFloat;
        expToDate = finances.getFixedExpense();
        savingsToDate = finances.getSavingsToDateElectric() + finances.getSavingsToDateGas();
//        savingsPreviousElectric = finances.getSavingsToDateElectric();
//        savingsPreviousGas = finances.getSavingsToDateGas();
        savingsAnnualFloat = (annualElectricSavings) * finances.getPricePerKWh() + (annualGasSavings) * finances.getPricePerBTU();
        expAnnual = finances.getAnnualExpense();
        extraYearsFloat = ((float)expToDate - (float)savingsToDate) / (savingsAnnualFloat - (float)expAnnual);
        extraDays = (int) (extraYearsFloat *365.0);
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();
        c.setTime(finances.getSavingsCalcDate());
        c.add(Calendar.DATE, extraDays);  // number of days to add
//        paybackDate = sdf.format(c.getTime());  // dt is now the new date
        paybackDate = c.getTime();

        return paybackDate;
    }     
    
    public Boolean PaybackDateIsInfinite(Financial finances, Integer savingsPreviousElectric, Integer savingsPreviousGas, Integer savingsPreviousDollars, Integer annualElectricSavings, Integer annualGasSavings, Integer dollarSavings) {
        Date elapsed;
        Integer expToDate, savingsToDate, expAnnual;
        Integer extraDays;
        //GregorianCalendar extraTime;
        Date paybackDate;
        //Date paybackDate;
        Time testTime;
        float extraYearsFloat;
        float savingsAnnualFloat;
        expToDate = finances.getFixedExpense();
        savingsToDate = finances.getSavingsToDateElectric() + finances.getSavingsToDateGas();
//        savingsPreviousElectric = finances.getSavingsToDateElectric();
//        savingsPreviousGas = finances.getSavingsToDateGas();
        savingsAnnualFloat = (annualElectricSavings) * finances.getPricePerKWh() + (annualGasSavings) * finances.getPricePerBTU();
        expAnnual = finances.getAnnualExpense();
        extraYearsFloat = ((float)expToDate - (float)savingsToDate) / (savingsAnnualFloat - (float)expAnnual);
        extraDays = (int) (extraYearsFloat *365.0);

        return extraDays < 0;
    }     
    
    
    private List CalcAnnualSavingsByCddHdd (Client client)
     {
        List<Integer> list = new ArrayList<Integer>();
        Sites currSite = new Sites();
        Integer electricitySavings = 0;
        Integer gasSavings = 0;
        String airportCode = null;
        String[] result = null;
        int origHddOccAnnual = 0;
        int origCddOccAnnual = 0;
        int newHddOccAnnual = 0;
        int newCddOccAnnual = 0;
        int origHddUnoccAnnual = 0;
        int origCddUnoccAnnual = 0;
        int newHddUnoccAnnual = 0;
        int newCddUnoccAnnual = 0;
//        int cddToDate = 0;
//        int hddToDate = 0;
        int oldBtuPerHdd = 0;
        int oldKwhPerCdd = 0;
        int oldOtherBtuAnnual = 0;
        int oldOtherKwhAnnual = 0;
        int newBtuPerHdd = 0;
        int newKwhPerCdd = 0;
        int newOtherBtuAnnual = 0;
        int newOtherKwhAnnual = 0;
        Integer savedkWHAnnual = 0;
        Integer savedBTUAnnual = 0;
        int moneySavedAnnual = 0;
        //float kwhSaved = 0.0f;
        //float btuSaved = 0.0f;
//        float moneySaved = 0.0f;
        int oldLightingKwh = 0;
        int newLightingKwh = 0;

        client = clientFacade.find(gClientId);

        Financial finances = financialManager.findFinancialByClientId(gClientId);
        float pricePerKwh = finances.getPricePerKWh();
        float pricePerBtu = finances.getPricePerBTU();
        
        // getting the $ saved
        Integer moneySavedToDate = (int) (finances.getPricePerBTU() * finances.getSavingsToDateGas());
        moneySavedToDate += (int) (finances.getPricePerKWh() * finances.getSavingsToDateElectric());
        NumberFormat usFormat = NumberFormat.getInstance(Locale.US);
        String moneySavedToDateStr = "$" + usFormat.format(moneySavedToDate).toString();


        List sitesList = sitesManager.findSitesByClientId(gClientId);
        Iterator <Sites> iterSites = sitesList.iterator();
        
        while (iterSites.hasNext() == true) {
            currSite = iterSites.next();
            Weatherstation weatherstation = currSite.getWeatherStationid();
            airportCode = weatherstation.getName();
            Energy currEnergy = energyManager.findSiteEnergyBySiteId(currSite.getId());
            
//            hdd = weatherstation.getHDDannual();    // ** JON **: If the base temperature is 'wrong', then adjust the annual HDD.  See GetHDD / GetCDD functions.
//            cdd = weatherstation.getCDDannual();    // ** JON **: If the base temperature is 'wrong', then adjust the annual HDD.  See GetHDD / GetCDD functions.
//            hddToDate = Integer.parseInt(hdd);
//            cddToDate = Integer.parseInt(cdd);
            if (currEnergy != null) {
                origHddOccAnnual = weatherManager.GetHDD(currEnergy.getOrigSetpointHeatOcc() - gBaseDiffOcc, weatherstation);
                newHddOccAnnual = weatherManager.GetHDD(currEnergy.getSetpointHeatOcc() - gBaseDiffOcc, weatherstation);
                origHddUnoccAnnual = weatherManager.GetHDD(currEnergy.getOrigSetpointHeatUnocc() - gBaseDiffUnocc, weatherstation);
                newHddUnoccAnnual = weatherManager.GetHDD(currEnergy.getSetpointHeatUnocc() - gBaseDiffUnocc, weatherstation);
                origCddOccAnnual = weatherManager.GetCDD(currEnergy.getOrigSetpointCoolOcc() - gBaseDiffOcc, weatherstation);
                newCddOccAnnual = weatherManager.GetCDD(currEnergy.getSetpointCoolOcc() - gBaseDiffOcc, weatherstation);
                origCddUnoccAnnual = weatherManager.GetCDD(currEnergy.getOrigSetpointCoolUnocc() - gBaseDiffUnocc, weatherstation);
                newCddUnoccAnnual = weatherManager.GetCDD(currEnergy.getSetpointCoolUnocc() - gBaseDiffUnocc, weatherstation);
            }

            Schedule schedule = currEnergy.getScheduleIdschedule();
            float  percentOcc = (schedule.getSunHours() + schedule.getMonHours() + schedule.getTuesHours() + schedule.getWedHours() + 
                schedule.getThHours() + schedule.getFriHours() + schedule.getSatHours()) / (float)144.0;
            float  percentUnocc = 1.0f - percentOcc;
            // at some point, it might make sense to store hddToDate and cddToDate to the 'Energy' table for each site.
            // Not sure when or where this should be done.

            oldBtuPerHdd = currEnergy.getOldBTUperHDD();
            oldKwhPerCdd = currEnergy.getOldKWHperCDD();
            oldOtherBtuAnnual = currEnergy.getOldOtherBTU();
            oldOtherKwhAnnual = currEnergy.getOldOtherKwh();
            newBtuPerHdd = currEnergy.getNewBTUperHDD();
            newKwhPerCdd = currEnergy.getNewKwhperCDD();
            newOtherBtuAnnual = currEnergy.getNewOtherBTU();
            newOtherKwhAnnual = currEnergy.getNewOtherKwh();
            Integer oldLightingKwhAnnual = currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightOriginal();
            Integer newLightingKwhAnnual = currEnergy.getLightPowerBaseOcc() * currEnergy.getPercentMaxLightSetting();
            Integer oldCoolOccKwhAnnual = Math.round(oldKwhPerCdd * origCddOccAnnual * percentOcc);
            Integer newCoolOccKwhAnnual = Math.round(newKwhPerCdd * newCddOccAnnual * percentOcc);
            Integer oldHeatOccBTUAnnual = Math.round(oldBtuPerHdd * origHddOccAnnual * percentOcc);
            Integer newHeatOccBTUAnnual = Math.round(newBtuPerHdd * newHddOccAnnual * percentOcc);            
            Integer oldCoolUnoccKwhAnnual = Math.round(oldKwhPerCdd * origCddUnoccAnnual * percentUnocc);
            Integer newCoolUnoccKwhAnnual = Math.round(newKwhPerCdd * newCddUnoccAnnual * percentUnocc);
            Integer oldHeatUnoccBTUAnnual = Math.round(oldBtuPerHdd * origHddUnoccAnnual * percentUnocc);
            Integer newHeatUnoccBTUAnnual = Math.round(newBtuPerHdd * newHddUnoccAnnual * percentUnocc);            
            
            savedkWHAnnual += (oldCoolOccKwhAnnual - newCoolOccKwhAnnual) + (oldCoolUnoccKwhAnnual - newCoolUnoccKwhAnnual) + (oldOtherKwhAnnual - newOtherKwhAnnual) + (oldLightingKwhAnnual - newLightingKwhAnnual);
            savedBTUAnnual += (oldHeatOccBTUAnnual - newHeatOccBTUAnnual) + (oldHeatUnoccBTUAnnual - newHeatUnoccBTUAnnual) + (oldOtherBtuAnnual - newOtherBtuAnnual);
            
            
//            List metersList = metersManager.findMetersBySiteId(currSite.getId());
//            Iterator <Meters> iterMeters = metersList.iterator();
//            while (iterMeters.hasNext() == true) {
//                Meters currMeter = iterMeters.next();
//            }
        }
        
//        Date dateNow = new Date();
//        Date startDateFinancial = finances.getStartDate();
//        float diffDaysStartTilNow = (dateNow.getTime() - startDateFinancial.getTime()) / gMsPerDay;
//        Integer whSavedPerDay = ((int) kwhSaved * 1000)  / (int) diffDaysStartTilNow;
//        Integer btuSavedPerDay = (int) btuSaved / (int) diffDaysStartTilNow;
//        float diffDaysStartTilPredEnd = ( paybackDate.getTime() - startDateFinancial.getTime() ) / gMsPerDay;
//        Integer predSavedWh = (int) diffDaysStartTilPredEnd * whSavedPerDay;
//        Integer predSavedBTU = (int) diffDaysStartTilPredEnd * btuSavedPerDay;
//        Integer moneySavedPred = (int) (predSavedWh * finances.getPricePerKWh() + predSavedBTU * finances.getPricePerBTU());           
        moneySavedAnnual = (int) (savedkWHAnnual * pricePerKwh + savedBTUAnnual * pricePerBtu);
        list.add(Math.round(savedkWHAnnual));
        list.add(Math.round(savedBTUAnnual));
        list.add(moneySavedAnnual);
        
        return list;
    }

    private String[] getHddCddbyDate (Integer heatBaseTemp, Integer coolBaseTemp, Date startDate, Date endDate, Weatherstation ws) throws IOException {
        String result[] = null;
        Sites currSite = null;
        List sitesList = new ArrayList();

        sitesList = sitesManager.findSitesByClientId(gClientId);

        Iterator <Sites> iter = sitesList.iterator();

        while (iter.hasNext() == true) {
            currSite = iter.next();
//            airportCode = currSite.getWeatherStationid().getName();
            //result = weatherManager.parseWeather(startDate, endDate, airportCode);
            result = weatherManager.getHddCddfromAirportCode(heatBaseTemp, coolBaseTemp, startDate, endDate, ws);
        }
        
        return result;
//        String hdd = result[0].split(":")[1];
//        String cdd = result[1].split(":")[1];

    }
    
    private Integer getHddbyDate (Integer baseTemp, Date startDate, Date endDate, Weatherstation ws) throws IOException {
        Sites currSite = null;
        List sitesList = new ArrayList();
        Integer result = 0;
        sitesList = sitesManager.findSitesByClientId(gClientId);

        Iterator <Sites> iter = sitesList.iterator();

        while (iter.hasNext() == true) {
            currSite = iter.next();
            Energy currEnergy = energyManager.findSiteEnergyBySiteId(currSite.getId());
//            airportCode = currSite.getWeatherStationid().getName();
            //result = weatherManager.parseWeather(startDate, endDate, airportCode);
            result += weatherManager.getHddFromAirportCode(baseTemp, startDate, endDate, ws);
        }
        
        return result;
//        String hdd = result[0].split(":")[1];
//        String cdd = result[1].split(":")[1];
    }
    
    private Integer getCddbyDate (Integer baseTemp, Date startDate, Date endDate, Weatherstation ws) throws IOException {
        Sites currSite = null;
        List sitesList = new ArrayList();
        Integer result = 0;
        sitesList = sitesManager.findSitesByClientId(gClientId);

        Iterator <Sites> iter = sitesList.iterator();

        while (iter.hasNext() == true) {
            currSite = iter.next();
//            airportCode = currSite.getWeatherStationid().getName();
            //result = weatherManager.parseWeather(startDate, endDate, airportCode);
            result += weatherManager.getCddFromAirportCode(baseTemp, startDate, endDate, ws);
        }
        
        return result;
//        String hdd = result[0].split(":")[1];
//        String cdd = result[1].split(":")[1];
    }
    
    /**
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(true);
        boolean isAjax = false;
        Weatherstation weatherStation;
        userPath = request.getServletPath();
        if (userPath.equals("/reports")) {
            userPath = "/WEB-INF/view/report_overview.jsp";
        } else if (userPath.equals("/test")) {
            Client client = new Client();
            client = clientFacade.find(gClientId);
            Date mostRecentCalcDate = CalcMostRecentBillEndDate(client);  
            userPath = "/dashboard";

        } else if (userPath.equals("/graphs_addseries")) {
            String id = request.getParameter("id");
            String test = graphingManager.addSeries(id);
            response.setContentType("application/json");
            PrintWriter out = response.getWriter();
            out.println(test);
            out.flush();
            out.close();
            userPath = "/WEB-INF/view/report_overview.jsp";
            isAjax = true;
        } else if (userPath.equals("/graphs_addseriesbyyear")) {
            String id = request.getParameter("id");
            String test = graphingManager.addSeriesbyYear(id);
            response.setContentType("application/json");
            PrintWriter out = response.getWriter();
            out.println(test);
            out.flush();
            out.close();
            userPath = "/WEB-INF/view/report_overview.jsp";
            isAjax = true;
        } else if (userPath.equals("/graphs_monthlyEnergyCosts")) {
            String test = graphingManager.monthlyEnergyCosts();
            response.setContentType("application/json");
            PrintWriter out = response.getWriter();
            out.println(test);
            out.flush();
            out.close();
            userPath = "/WEB-INF/view/report_overview.jsp";
            isAjax = true;
            
        } else if (userPath.equals("/tenant")) {
            userPath = "/WEB-INF/view/report_tenant.jsp";
        } else if (userPath.equals("/setup_entry")) {
            userPath = "/WEB-INF/view/entry.jsp";
        } else if (userPath.equals("/setup_building")) {
            userPath = "/WEB-INF/view/setup_building.jsp";
        } else if (userPath.equals("/setup_schedule")) {
            userPath = "/WEB-INF/view/setup_schedule.jsp";
        } else if (userPath.equals("/setup_energy")) {
            List sitesList = new ArrayList();
            List enduseList = new ArrayList();
            List zoneList = new ArrayList();
            List scheduleList = new ArrayList();
            sitesList = sitesFacade.findAll();
            zoneList = zonesFacade.findAll();
            enduseList = endusecategoryFacade.findAll();
            scheduleList = scheduleFacade.findAll();
            request.setAttribute("scheduleList", scheduleList);
            request.setAttribute("sitesList", sitesList);
            request.setAttribute("enduseList", enduseList);
            request.setAttribute("zoneList", zoneList);
            userPath = "/WEB-INF/view/setup_energy.jsp";
        } else if (userPath.equals("/setup_zone")) {
            Setup_zone_add(request, response);
            userPath = "/WEB-INF/view/setup_zone.jsp";
        } else if (userPath.equals("/setup_circuits")) {
            String siteIdStr = request.getParameter("siteId");
            Integer siteId;
            if (siteIdStr != null) {
                siteId = Integer.parseInt(siteIdStr);
            } else siteId = -1;
            
            List sitesList = new ArrayList();
            List circuitMeterList = new ArrayList();
            List panelList = new ArrayList();
            List enduseList = new ArrayList();
            List zoneList = new ArrayList();

            sitesList = sitesFacade.findAll();
            if (siteId == -1) {
                if (sitesList.size() > 0) {
                    Sites site = (Sites) sitesList.get(0);
                    siteId = site.getId();
                }
            }
//                DoGetListsBySiteID(siteId, circuitMeterList, panelList, zoneList);
            circuitMeterList = multicircuitmeterManager.findMulticircuitmetersBySiteId(siteId);
            panelList = panelManager.findPanelsBySiteId(siteId);
            zoneList = zoneManager.findZonesBySiteId(siteId);
            enduseList = endusecategoryFacade.findAll();

            request.setAttribute("sitesList", sitesList);
            request.setAttribute("circuitMeterList", circuitMeterList);
            request.setAttribute("panelList", panelList);
            request.setAttribute("enduseList", enduseList);
            request.setAttribute("zoneList", zoneList);
            request.setAttribute("selected", siteId);
            userPath = "/WEB-INF/view/setup_circuits.jsp";
            
        } else if (userPath.equals("/updateCircuitBySite")) {
            String siteIdStr = request.getParameter("siteId");
            Integer siteId;
            if (siteIdStr != null) {
                siteId = Integer.parseInt(siteIdStr);
            } else siteId = -1;
            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();
            
            String retStr = "";
            Multicircuitmeter currCircuitmeter;
            Panel currPanel;
            Zones currZone;
            List circuitMeterList = new ArrayList();
            List panelList = new ArrayList();
            List zoneList = new ArrayList();
            
            circuitMeterList = multicircuitmeterManager.findMulticircuitmetersBySiteId(siteId);
            panelList = panelManager.findPanelsBySiteId(siteId);
            zoneList = zoneManager.findZonesBySiteId(siteId);
            
            Iterator<Multicircuitmeter> iter = circuitMeterList.iterator();
            retStr += "cmmeter,";
            while (iter.hasNext() == true) {
                currCircuitmeter = iter.next();
                retStr +="<option value='" + currCircuitmeter.getIdmultiCircuitMeter() + "'>" + currCircuitmeter.getMACaddress() + "</option>";
            }
            retStr += ";";

            Iterator<Panel> paneliter = panelList.iterator();
            retStr += "cpanel,";
            while (paneliter.hasNext() == true) {
                currPanel = paneliter.next();
                retStr +="<option value='" + currPanel.getIdPanel() + "'>" + currPanel.getName() + "</option>";
            }
            retStr += ";";

            Iterator<Zones> zoneiter = zoneList.iterator();
            retStr += "czone,";
            while (zoneiter.hasNext() == true) {
                currZone = zoneiter.next();
                retStr +="<option value='" + currZone.getIdzones() + "'>" + currZone.getName() + "</option>";
            }

            out.println(retStr);
            out.flush();
            out.close();
            
            isAjax = true;
            userPath = "/WEB-INF/view/setup_circuits.jsp";

        } else if (userPath.equals("/setup_panel")) {
            Setup_panel_add(request, response);                
            userPath = "/WEB-INF/view/setup_panel.jsp";
        } else if (userPath.equals("/bills")) {
            userPath = "/WEB-INF/view/bills.jsp";
        } else if (userPath.equals("/dashboard")) {
            try {
                SetupDashboardPage(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
//            try {
//                GetDashboardInfoByCddHdd(request, response);
//            } catch (ParseException ex) {
//                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } else if (userPath.equals("/setup_user")) {
            userPath = "/WEB-INF/view/setup_user.jsp";
        } else if (userPath.equals("/edit_user")) {
            boolean showForm = false;
            String intStr = request.getParameter("userid");
            if (intStr != null) {
                int userID = Integer.parseInt(intStr);
                Users user = null;
                user = userManager.findUserById(userID);

                if (user != null) {
                    showForm = true;
                    request.setAttribute("userinfo", user);
                    
                } else {
                    request.setAttribute("result", "<font color='red'>User edit failed.  Please try again</font>");
                }
            }
            request.setAttribute("users", usersFacade.findAll());
            request.setAttribute("showform", showForm);
            userPath = "/WEB-INF/view/edit_user.jsp";
            isAjax = false;
        }


        if (userPath.equals("/getMeterInfo")) {
            String meterIdStr = request.getParameter("meterNum");
            Integer meterId = Integer.parseInt(meterIdStr);
            gMeter = metersFacade.find(meterId);
//            gSite = sitesFacade.find(gMeter.getSitesId());
            gSite = gMeter.getSitesId();
            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();
            out.println("Site Name: " + gSite.getName());
            out.println("Site Address: " + gSite.getAddress1());
            out.println("Account Number: " + gMeter.getAccountNum());
            out.println("Fuel Type: " + gMeter.getFuelType());
            out.println("Provider: " + gMeter.getProviderName());
            out.flush();
            out.close();
            userPath = "/WEB-INF/view/entry.jsp";
            isAjax = true;
        }

        if (userPath.equals("/getMeters")) {
            Meters currMeter;
            List metersList = new ArrayList();
            String meterType = request.getParameter("meterType");
            metersList = metersFacade.findByResourceType(meterType);

            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();

            Iterator<Meters> iter = metersList.iterator();
            while (iter.hasNext() == true) {
                currMeter = iter.next();
                out.println("<option value='" + currMeter.getId() + "'>" + currMeter.getTextID() + "</option>");

            }
            out.flush();
            out.close();
            userPath = "/WEB-INF/view/entry.jsp";
            isAjax = true;
        }
        if (userPath.equals("/getBills")) {
            List billsList = new ArrayList();
            Bills currBill;

            String meterTypeStr = request.getParameter("meterType");
            String meterIdStr = request.getParameter("meterNum");
            Integer meterId = Integer.parseInt(meterIdStr);
            billsList = billsFacade.findAll();
            Iterator<Bills> iter = billsList.iterator();

            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();
            out.println("<table id='grid' summary='Bill History'>");
            out.println("<thead>");
            out.println("<tr><th scope='col'>Start Date</th><th scope='col'>End Date</th><th scope='col'>Amount</th><th scope='col'>Bill Total</th><th scope='col'>Bill ID</th><th scope='col'>PDF</th><th scope='col'>edit</th><th scope='col'>delete</th></tr>");
            out.println("</thead><tbody>");

            while (iter.hasNext() == true) {
                currBill = iter.next();
                if (currBill.getMetersId() == meterId) {
                    out.println("<tr><td>" + currBill.getDateStart() + "</td>");
                    out.println("<td>" + currBill.getDateEnd() + "</td>");
                    out.println("<td>" + currBill.getAmount() + "</td>");
                    out.println("<td>" + currBill.getCost() + "</td>");
                    out.println("<td>" + currBill.getInternalID() + "</td>");
                    if (currBill.getPdfId() != null) {
                        out.println("<td><a href='bill_viewImg?id=" + currBill.getPdfId() + "'>PDF</a></td>");
                    } else {
                        out.println("<td>&nbsp;</td>");
                    }
                    out.println("<td><a href='bill_edit?type=" + meterTypeStr + "&id=" +  + currBill.getId() + "'>edit</a></td>");                 
                    out.println("<td><a href='bill_delete?id=" +  + currBill.getId() + "'>delete</a></td></tr>");                 
                        
                }
            }
            userPath = "/WEB-INF/view/bills.jsp";

            out.flush();
            out.close();
            isAjax = true;
        }
        if (userPath.equals("/edit_user_remove")) {
            String intStr = request.getParameter("userid");
            if (intStr != null) {
                int userID = Integer.parseInt(intStr);
                boolean removed = userManager.removeUser(userID);

                if (removed) {
                    request.setAttribute("result", "<font color='green'>User successfully removed.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>User remove failed. Please try again.</font>");
                }
            }

            request.setAttribute("users", usersFacade.findAll());
            userPath = "/WEB-INF/view/edit_user.jsp";
        }
        if (userPath.equals("/edit_building_remove")) {
            String intStr = request.getParameter("buildingid");
            if (intStr != null) {
                int siteID = Integer.parseInt(intStr);
                boolean removed = sitesManager.removeSite(siteID);
                if (removed) {
                    request.setAttribute("result", "<font color='green'>Building successfully removed.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>Building remove failed.  Please try again.</font>");
                }
            }

            request.setAttribute("buildings", sitesFacade.findAll());
            userPath = "/WEB-INF/view/edit_building.jsp";
        }
        if (userPath.equals("/edit_schedule_remove")) {
            String intStr = request.getParameter("scheduleid");
            if (intStr != null) {
                int scheduleID = Integer.parseInt(intStr);
                boolean removed = scheduleManager.removeSchedule(scheduleID);
                if (removed) {
                    request.setAttribute("result", "<font color='green'>Schedule successfully removed.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>Schedule remove failed.  Please try again.</font>");
                }
            }

            request.setAttribute("scheduleList", scheduleFacade.findAll());
            userPath = "/WEB-INF/view/edit_schedule.jsp";
        }
        if (userPath.equals("/edit_zone_remove")) {
            String intStr = request.getParameter("zoneid");
            if (intStr != null) {
                int zoneID = Integer.parseInt(intStr);
                boolean removed = zoneManager.removeZone(zoneID);
                if (removed) {
                    request.setAttribute("result", "<font color='green'>Zone successfully removed.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>Zone remove failed.  Please try again.</font>");
                }
            }

            request.setAttribute("zones", zonesFacade.findAll());
            userPath = "/WEB-INF/view/edit_zone.jsp";
        }
        if (userPath.equals("/edit_energy_remove")) {
            String intStr = request.getParameter("energyid");
            if (intStr != null) {
                int energyID = Integer.parseInt(intStr);
                boolean removed = energyManager.removeEnergy(energyID);
                if (removed) {
                    request.setAttribute("result", "<font color='green'>Energy successfully removed.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>Energy remove failed.  Please try again.</font>");
                }
            }

            request.setAttribute("energyList", energyFacade.findAll());
            userPath = "/WEB-INF/view/edit_energy.jsp";
        }
        if (userPath.equals("/edit_energy")) {
            boolean showForm = false;
            String intStr = request.getParameter("energyid");
            if (intStr != null) {
                int energyID = Integer.parseInt(intStr);
                Energy energy = null;
                List sitesList = new ArrayList();
                List enduseList = new ArrayList();
                List zoneList = new ArrayList();
                List scheduleList = new ArrayList();
                sitesList = sitesFacade.findAll();
                zoneList = zonesFacade.findAll();
                enduseList = endusecategoryFacade.findAll();
                scheduleList = scheduleFacade.findAll();
                energy = energyManager.findEnergyByEnergyId(energyID);
                if (energy != null) {
                    showForm = true;
                    request.setAttribute("energyinfo", energy);
                    request.setAttribute("scheduleList", scheduleList);
                    request.setAttribute("sitesList", sitesList);
                    request.setAttribute("enduseList", enduseList);
                    request.setAttribute("zoneList", zoneList);
                    
                } else {
                    request.setAttribute("result", "<font color='red'>Energy edit failed. Please try again.</font>");
                }
            }
            request.setAttribute("energyList", energyFacade.findAll());
            request.setAttribute("showform", showForm);
            userPath = "/WEB-INF/view/edit_energy.jsp";
            isAjax = false;
        }
        if (userPath.equals("/edit_zone")) {
            boolean showForm = false;
            String intStr = request.getParameter("zoneid");
            if (intStr != null) {
                int zoneID = Integer.parseInt(intStr);
                Zones zone = null;
                List siteList = new ArrayList();
                List zoneList = new ArrayList();
                siteList = sitesFacade.findAll();
                zoneList = zonesFacade.findAll();
                zone = zoneManager.findZoneById(zoneID);
                if (zone != null) {
                    showForm = true;
                    request.setAttribute("zoneinfo", zone);
                    request.setAttribute("zoneList", zoneList);
                    request.setAttribute("siteList", siteList);
                } else {
                    request.setAttribute("result", "<font color='red'>Zone edit failed. Please try again.</font>");
                }
            }
            request.setAttribute("zones", zonesFacade.findAll());
            request.setAttribute("showform", showForm);
            userPath = "/WEB-INF/view/edit_zone.jsp";
            isAjax = false;
        }
        if (userPath.equals("/edit_schedule")) {
            boolean showForm = false;
            String intStr = request.getParameter("scheduleid");
            if (intStr != null) {
                int scheduleID = Integer.parseInt(intStr);
                Schedule schedule = null;
                schedule = scheduleManager.findScheduleByID(scheduleID);
                if (schedule != null) {
                    showForm = true;
                    request.setAttribute("scheduleinfo", schedule);
                } else {
                    request.setAttribute("result", "<font color='red'>Schedule edit failed. Please try again.</font>");
                    
                }
            }
            request.setAttribute("scheduleList", scheduleFacade.findAll());
            request.setAttribute("showform", showForm);
            userPath = "/WEB-INF/view/edit_schedule.jsp";
            isAjax = false;
        }
        if (userPath.equals("/edit_building")) {
                        boolean showForm = false;
            String intStr = request.getParameter("buildingid");
            if (intStr != null) {
                int buildingID = Integer.parseInt(intStr);
                Sites site = null;
                site = siteManager.findSiteById(buildingID);
                if (site != null) {
                    showForm = true;
                    request.setAttribute("buildinginfo", site);
                } else {
                    request.setAttribute("result", "<font color='red'>Building edit failed. Please try again.</font>");
                }
            }
            request.setAttribute("buildings", sitesFacade.findAll());
            request.setAttribute("showform", showForm);
            userPath = "/WEB-INF/view/edit_building.jsp";
            isAjax = false;
        }
        if (userPath.equals("/bill_viewImg")) {
            String idStr = request.getParameter("id");
            Integer pdfId = Integer.parseInt(idStr);
            Pdf pdf = new Pdf();


            pdf = pdfFacade.find(pdfId);
            int DEFAULT_BUFFER_SIZE = (int) pdf.getFilesize();


            byte[] b = pdf.getContent();
            response.setContentType(pdf.getFiletype());
            response.setContentLength((int) pdf.getFilesize());
            response.setHeader("Content-Disposition", "attachment; filename=\"" + pdf.getFilename() + "\"");
            response.setBufferSize(DEFAULT_BUFFER_SIZE);
            Blob blobfile = null;
            
            try {
                blobfile = new SerialBlob(b);
            } catch (SerialException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }


            InputStream is = null;
            
            try {
                is = blobfile.getBinaryStream();
            } catch (SQLException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            BufferedInputStream input = null;
            BufferedOutputStream output = null;


            try {
                // Open streams.
                input = new BufferedInputStream(is, DEFAULT_BUFFER_SIZE);
                output = new BufferedOutputStream(response.getOutputStream(), DEFAULT_BUFFER_SIZE);


                // Write file contents to response.
                byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
                int length;
                while ((length = input.read(buffer)) > 0) {
                    output.write(buffer, 0, length);
                }
            } finally {
                // Gently close streams.
                output.close();
                input.close();
            }
            
            isAjax = true;
        }
        
        if (userPath.equals("/bill_edit")) {
            Bills currBill;
            String idStr = request.getParameter("id");
            Integer billId = Integer.parseInt(idStr);
            String typeStr = request.getParameter("type");
 
            currBill = billsFacade.find(billId);
            request.setAttribute("bill", currBill);
            
            if (typeStr.equals("Electric")) {
                userPath = "/WEB-INF/view/bill_edit_elec.jsp";
            }
             if (typeStr.equals("Natual Gas")) {
                userPath = "/WEB-INF/view/bill_edit_natgas.jsp";
            }
            if (typeStr.equals("Propane")) {
                userPath = "/WEB-INF/view/bill_edit_prop.jsp";
            }
            if (typeStr.equals("Waste")) {
                userPath = "/WEB-INF/view/bill_edit_waste.jsp";
            }
            if (typeStr.equals("Water")) {
                userPath = "/WEB-INF/view/bill_edit_water.jsp";
            }
           isAjax = false;
        }
        
         if (userPath.equals("/setPolicy")) {
            try {
                SetPolicy(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
            userPath = "/WEB-INF/view/dashboard.jsp";
        }
         
         if (userPath.equals("/dashboard_recalc")) {
            try {
                RecalculateDashboardPaybackScenario(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
             userPath = "/WEB-INF/view/dashboard.jsp";
             isAjax = true;
             
         }
        
         if (userPath.equals("/dashboard_recalcByBuilding")) {
            try {
                RecalculatePaybackScenarioByBuilding(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
             userPath = "/WEB-INF/view/dashboard.jsp";
             isAjax = true;
             
         }
        
        if (userPath.equals("/scenario")) {
            try {
                SetupDashboardPage(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }

            List sitesList = new ArrayList();
            // ClientId is hard coded for now.  in the future, we have to assign ClientId from the database.
            try {
                sitesList = sitesManager.findSitesByClientId(gClientId);
            } catch(Exception e) {
                userPath = "";
            }

            Sites site = (Sites)sitesList.get(0);
            Energy energy = new Energy();
            try {
                 energy = energyManager.findSiteEnergyBySiteId(site.getId());
            } catch (Exception ex) {
                userPath = "";
            }

            request.setAttribute("setpoints_b", energy);
            request.setAttribute("sitesList", sitesList);

            userPath = "/WEB-INF/view/scenario.jsp";
            isAjax = false;
        }

         if (userPath.equals("/hvac")) {
             userPath = "/WEB-INF/view/hvac.jsp";
             isAjax = false;
        }

         if (userPath.equals("/alerts")) {
             userPath = "/WEB-INF/view/alerts.jsp";
             isAjax = false;
        }

         if (userPath.equals("/lighting")) {
             userPath = "/WEB-INF/view/lighting.jsp";
             isAjax = false;
        }
         
         if (userPath.equals("/parseweather")) {
             String[] result = null;
             Calendar startDateCal = Calendar.getInstance();
             startDateCal.set(2008, 6, 1);
             Calendar endDateCal = Calendar.getInstance();
             Date startDate = startDateCal.getTime();
             Date endDate = endDateCal.getTime();
             Client client = clientFacade.find(gClientId);
            List sitesList = new ArrayList();
            Sites site = null;
            sitesList = sitesManager.findSitesByClientId(gClientId);

            Iterator<Sites> iter = sitesList.iterator();
            if (iter.hasNext() == true) {
                site = iter.next();
                Weatherstation ws = site.getWeatherStationid();

                 result = weatherManager.getHddCddfromAirportCode(65, 65, startDate, endDate, ws);
             }
         }
         
         if (userPath.equals("/getBuildingSetPoints")) {
             String siteIdStr = request.getParameter("siteId");
             int siteId = 0;
             if (siteIdStr != null) {
                 siteId = Integer.parseInt(siteIdStr);
             }
             Energy energy = energyManager.findSiteEnergyBySiteId(siteId);
             
            response.setContentType("text/plain");
            PrintWriter out = response.getWriter();
            String outStr = new String();
            
            outStr = "light_b-input:" + energy.getPercentMaxLightSetting() + ";";
            outStr += "heat_b-input:" + energy.getSetpointHeatOcc() + ";";
            outStr += "cool_b-input:" + energy.getSetpointCoolOcc() + ";";
            outStr += "heatUO_b-input:" + energy.getSetpointHeatUnocc() + ";";
            outStr += "coolUO_b-input:" + energy.getSetpointCoolUnocc() + ";";
            
            out.println(outStr);

           userPath = "/WEB-INF/view/scenario.jsp";

            out.flush();
            out.close();
            isAjax = true;
             
         }
         
        // use RequestDispatcher to forward request internally
        String url = userPath;

        if (!isAjax) {
            try {
                request.getRequestDispatcher(url).forward(request, response);
            } catch (Exception ex) {
//                ex.printStackTrace();
            }
        }

    }

    private static String getFilename(Part part) throws MessagingException {
        for (String cd : part.getHeader("content-disposition").split(";")) {
            if (cd.trim().startsWith("filename")) {
                return cd.substring(cd.indexOf('=') + 1).trim().replace("\"", "");
            }
        }
        return null;
    }

    private static String getValue(Part part) throws IOException, MessagingException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), "UTF-8"));
        StringBuilder value = new StringBuilder();
        char[] buffer = new char[1024];
        for (int length = 0; (length = reader.read(buffer)) > 0;) {
            value.append(buffer, 0, length);
        }
        return value.toString();
    }

    void DoAddPanel(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            String name = request.getParameter("pname");
            String strBuilding = request.getParameter("pbuilding");
            String strParentPanel = request.getParameter("pparent");
            int idBuilding = -1;
            String strParentCircuitNum = request.getParameter("pparentPanelCircuitNum");
            int parentCircuitNum = -1;
            Circuit parentCircuit = null;
            if ((strParentCircuitNum != null) && (!strParentCircuitNum.isEmpty()))
                parentCircuit = circuitManager.findCircuitByName(strParentCircuitNum);
            Sites building = null;
            if ((strBuilding != null) && (!strBuilding.isEmpty())) {
                idBuilding= Integer.parseInt(strBuilding);
                building = siteManager.findSiteById(idBuilding);
            }
//            int parentPanelID = 0;
//            if (strParentPanel != null)
//                parentPanelID = Integer.parseInt(strParentPanel);
            Panel parentPanel = null;
            if (strParentPanel != null)
                parentPanel = panelManager.findPanelByName(strParentPanel);

//            if (!parentPanel.equals(null))
            String panelAdded = panelManager.addPanel(name, building, parentPanel, parentCircuit);
            if (panelAdded.equals("false")) {
                request.setAttribute("result", "<font color='red'>Add Panel failed.  Please try again.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Panel " + panelAdded + " added successfully.</font>");
            }
            userPath = "/WEB-INF/view/setup_panel.jsp";
    }

    void DoAddZone(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            String name = request.getParameter("zname");
            String strBuilding = request.getParameter("zbuilding");
            String strParentZone = request.getParameter("zparent");
            int idBuilding = -1;
            int parentZoneID = -1;
            String sqft = request.getParameter("zsqft");
            int nSqFt = Integer.parseInt(sqft);
            String pop = request.getParameter("zpop");
            int nPop = Integer.parseInt(pop);
            Sites building = null;
            if (strBuilding != null) {
                idBuilding= Integer.parseInt(strBuilding);
                building = siteManager.findSiteById(idBuilding);
            }
            Zones parentZone = null;
            if ((strParentZone != null) && (!strParentZone.isEmpty())) {
                parentZoneID = Integer.parseInt(strParentZone);
                parentZone = zoneManager.findZoneById(parentZoneID);
            }

//            if (!parentZone.equals(null))
            String zoneAdded = zoneManager.addZone(name, nPop, nSqFt, building, parentZone);
            if (zoneAdded.equals("false")) {
                request.setAttribute("result", "<font color='red'>Add Zone failed.  Please try again.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Zone " + zoneAdded + " added successfully.</font>");
            }
            userPath = "/WEB-INF/view/setup_zone.jsp";
    }
    
    void DoAddCircuit(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

//        String strBuilding = request.getParameter("cbuilding");
        String strMulticirId = request.getParameter("cmmeter");
        String strMeterNo = request.getParameter("cmulticirmeternum");
        String strPhase = request.getParameter("cphase");
        String strPanel = request.getParameter("cpanel");
        String strIsPanelInput = request.getParameter("isinput");
        String strEndUseId = request.getParameter("cenduse");
        String strZoneId = request.getParameter("czone");
        String strName = request.getParameter("cmetername");
        int zoneId = -1;
        int enduseId = -1;
        int panelId = -1;
        int multicirId = -1;
        int meterNo = -1;
        int phaseNo = -1;
        
        boolean isPanelInput = false;
        if (strIsPanelInput != null) {
            if (strIsPanelInput.equals("true")) {
                isPanelInput = true;
            }
        }
        if ((strMeterNo != null) && (!strMeterNo.isEmpty())) {
            meterNo = Integer.parseInt(strMeterNo);
        }
        if ((strPhase != null) && (!strPhase.isEmpty())) {
            phaseNo = Integer.parseInt(strPhase);
        }
        
        Zones zone = null;
        if ((strZoneId != null) && (!strZoneId.isEmpty())) {
            zoneId = Integer.parseInt(strZoneId);
            zone = zoneManager.findZoneById(zoneId);
        }
        Endusecategory enduse = null;
        if ((strEndUseId != null) && (!strEndUseId.isEmpty())) {
            enduseId = Integer.parseInt(strEndUseId);
            enduse = endusecategoryFacade.find(enduseId);
        }
        Panel panel = null;
        if ((strEndUseId != null) && (!strEndUseId.isEmpty())) {
            panelId = Integer.parseInt(strPanel);
            panel = panelFacade.find(panelId);
        }
        Multicircuitmeter multicircuitmeter = null;
        if ((strEndUseId != null) && (!strEndUseId.isEmpty())) {
            multicirId = Integer.parseInt(strMulticirId);
            multicircuitmeter = multicircuitmeterFacade.find(multicirId);
        }

        String circuitAdded = circuitManager.addCircuit(strName, isPanelInput, phaseNo, panel, multicircuitmeter, meterNo, zone, enduse);
        if (circuitAdded.equals("false")) {
            request.setAttribute("result", "<font color='red'>Add Circuit failed.  Please try again.</font>");
        } else {
            request.setAttribute("result", "<font color='green'>Panel " + circuitAdded + " added successfully.</font>");
        }
        userPath = "/WEB-INF/view/setup_circuits.jsp";
    }

    void DoAddBill(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException, ParseException {
        String meterIdStr = null;
//        String pdfIdStr = null;
        Date billStart = null;
        Date billEnd = null;
        Integer readStart = null;
        Integer readEnd = null;
        float amount = 0;
        float demand = 0;
        float peakDemand = 0;
        float powerFactor = 0;
        float kva = 0;
        float loadFactor = 0;
        BigDecimal cost = null;
        BigDecimal costDemand= null;
        BigDecimal costUsage= null;
        BigDecimal costDistDemand= null;
        BigDecimal costDistUsage= null;
        BigDecimal surchargeAsPercent= null;
        BigDecimal taxAmount= null;
        Integer usageThreshold = null;
        BigDecimal costAboveThreshold= null;
        Integer offPeakEnergy = null;
        BigDecimal offPeakDiscount= null;
        String tryname = null;
        String filename = null;
        long fileSize = 0;
        String contentType = null;
        InputStream fileContent;
        byte[] bytes = null;
        DateFormat formatter = new SimpleDateFormat("yyyy'-'MM'-'dd");
        
        for (Part part : request.getParts()) {
            try {
                tryname = getFilename(part);
            } catch (MessagingException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (tryname == null) {
                // Process regular form field (input type="text|radio|checkbox|etc", select, etc).
                String fieldname = part.getName();
                String fieldvalue = null;
                try {
                    fieldvalue = getValue(part);
                } catch (MessagingException ex) {
                    Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
                }
                if ("meterNumber".equals(fieldname)) {
                    meterIdStr = fieldvalue;
                }
                if ("billStart".equals(fieldname)) {
                    billStart = (Date)formatter.parse(fieldvalue);
                }
                if ("billEnd".equals(fieldname)) {
                    billEnd = (Date)formatter.parse(fieldvalue);
                }
                if ("readStart".equals(fieldname)) {
                    readStart = Integer.parseInt(fieldvalue);
                }
                if ("readEnd".equals(fieldname)) {
                    readEnd = Integer.parseInt(fieldvalue);
                }
                if ("amount".equals(fieldname)) 
                    amount = Float.valueOf(fieldvalue).floatValue();
                if ("demand".equals(fieldname)) 
                    demand = Float.valueOf(fieldvalue).floatValue();
                if ("peakDemand".equals(fieldname)) 
                    peakDemand = Float.valueOf(fieldvalue).floatValue();
                if ("powerFactor".equals(fieldname)) 
                    powerFactor = Float.valueOf(fieldvalue).floatValue();
                if ("kva".equals(fieldname)) 
                    kva = Float.valueOf(fieldvalue).floatValue();
                if ("loadFactor".equals(fieldname)) 
                    loadFactor = Float.valueOf(fieldvalue).floatValue();
                if ("cost".equals(fieldname)) 
                    cost = new BigDecimal(fieldvalue);
                if ("costDemand".equals(fieldname)) 
                    costDemand = new BigDecimal(fieldvalue);
                if ("costUsage".equals(fieldname)) 
                    costUsage = new BigDecimal(fieldvalue);
                if ("costDistDemand".equals(fieldname)) 
                    costDistDemand = new BigDecimal(fieldvalue);
                if ("costDistUsage".equals(fieldname)) 
                    costDistUsage = new BigDecimal(fieldvalue);
                if ("surchargeAsPercent".equals(fieldname)) 
                    surchargeAsPercent = new BigDecimal(fieldvalue);
                if ("taxAmount".equals(fieldname)) 
                    taxAmount = new BigDecimal(fieldvalue);
                if ("usageThreshold".equals(fieldname)) 
                    usageThreshold = Integer.parseInt(fieldvalue);
                if ("costAboveThreshold".equals(fieldname)) 
                    costAboveThreshold = new BigDecimal(fieldvalue);
                if ("offPeakEnergy".equals(fieldname)) 
                    offPeakEnergy = Integer.parseInt(fieldvalue);
                if ("offPeakDiscount".equals(fieldname)) 
                    offPeakDiscount = new BigDecimal(fieldvalue);                   

            } else if (!tryname.isEmpty()) {
                // Process form file field (input type="file").
                filename = tryname.substring(tryname.lastIndexOf('/') + 1).substring(tryname.lastIndexOf('\\') + 1); // MSIE fix.
                fileContent = part.getInputStream();
                bytes = IOUtils.toByteArray(fileContent);

    //                    pdf.setName(filename);
                contentType = part.getContentType();
                fileSize = part.getSize();
    //                    pdf.setContent(bytes);
            }
        }

        // ...
        Integer meterId = -1;
        Integer pdfId = -1;
        int retValue = -1;
        if ((meterIdStr != null) && !meterIdStr.isEmpty()) {
    //                pdf = PDFmanager.storePdf(filename, contentType, fileSize, bytes);
            meterId = Integer.parseInt(meterIdStr);
            gMeter = metersFacade.find(meterId);
            retValue = billManager.addBill(gMeter, billStart, billEnd, readStart, readEnd, amount, 
                cost, demand, peakDemand, powerFactor, kva, loadFactor, costDemand, costUsage, costDistDemand,
                costDistUsage, surchargeAsPercent, taxAmount, usageThreshold, costAboveThreshold, offPeakEnergy, offPeakDiscount);
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, "Attempted Add Bill");
                
            
        }
        
        
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        userPath = request.getServletPath();


        if (userPath.equals("/storeBill")) {
            try {
                DoAddBill(request, response);
            } catch (ParseException ex) {
                Logger.getLogger(ControllerServlet.class.getName()).log(Level.SEVERE, null, ex);
            }

            userPath = "/WEB-INF/view/entry.jsp";
        } else if (userPath.equals("/admin")) {
            userPath = "/WEB-INF/view/dashboard.jsp";
        } else if (userPath.equals("/add_zone")) {
            DoAddZone(request, response);
        } else if (userPath.equals("/add_panel")) {
            DoAddPanel(request, response);
        } else if (userPath.equals("/add_schedule")) {
            String schName = request.getParameter("sname");
            int schMon = Integer.parseInt(request.getParameter("smon"));
            int schTue = Integer.parseInt(request.getParameter("stues"));
            int schWed = Integer.parseInt(request.getParameter("swed"));
            int schTh = Integer.parseInt(request.getParameter("sth"));
            int schFri = Integer.parseInt(request.getParameter("sfri"));
            int schSat = Integer.parseInt(request.getParameter("ssat"));
            int schSun = Integer.parseInt(request.getParameter("ssun"));
            
            String strIsOnWhenDark = request.getParameter("sIsOnWhenDark");
            Boolean isOnWhenDark = false;
            if (strIsOnWhenDark != null) {
                isOnWhenDark = (strIsOnWhenDark.equalsIgnoreCase("on"));
            }          
            String schedName = scheduleManager.addSchedule(schName, schMon, schTue, schWed, schTh, schFri, schSat, schSun, isOnWhenDark);
            if (schedName == null) {
                request.setAttribute("result", "<font color='red'>Add schedule failed. Please try again.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Schedule added successfully.</font>");
            }
            userPath = "/WEB-INF/view/setup_schedule.jsp";
        } else if (userPath.equals("/add_energy")) {
            Client client = null;
            Schedule schedule = null;
            Sites site = null;
            Zones zone = null;
            Endusecategory enduse = null;
            String name = request.getParameter("bname");
            try {
                client = clientFacade.find(gClientId);
            } catch (Exception e) {
                gClientId = 1;
            }
            schedule = scheduleFacade.find(Integer.parseInt(request.getParameter("schedule")));
            site = sitesFacade.find(Integer.parseInt(request.getParameter("building")));
            zone = zonesFacade.find(Integer.parseInt(request.getParameter("zone")));
            enduse = endusecategoryFacade.find(Integer.parseInt(request.getParameter("enduse")));
            String strWholeBuilding = request.getParameter("isWB");
            Boolean isWholeBuilding = false;
            if (strWholeBuilding != null) {
                isWholeBuilding = (strWholeBuilding.equalsIgnoreCase("on"));
            }
            String strOverride = request.getParameter("isOR");
            Boolean isOverride = false;
            if (strOverride != null) {
                isOverride = (strOverride.equalsIgnoreCase("on"));
            }            
            int LightPowerOccupied = Integer.parseInt(request.getParameter("LPOCC"));
            int LightPowerUnoccupied = Integer.parseInt(request.getParameter("LPUOCC"));
            int PercentMax = Integer.parseInt(request.getParameter("PML"));
            int PercentMaxOrig = Integer.parseInt(request.getParameter("PMLO"));      
            String strOnWhenDark = request.getParameter("isOWD");
            Boolean isOnWhenDark = false;
            if (strOnWhenDark != null) {
                isOnWhenDark = (strOnWhenDark.equalsIgnoreCase("on"));
            }                
            int OrigCoolingPointOccupied = Integer.parseInt(request.getParameter("OCPOCC"));
            int OrigCoolingPointUnoccupied = Integer.parseInt(request.getParameter("OCPUOCC"));
            int CoolingPointOccupied = Integer.parseInt(request.getParameter("CPOCC"));
            int CoolingPointUnoccupied = Integer.parseInt(request.getParameter("CPUOCC"));
            int OrigHeatPointOccupied = Integer.parseInt(request.getParameter("OHPOCC"));
            int OrigHeatPointUnoccupied = Integer.parseInt(request.getParameter("OHPUOCC"));
            int HeatPointOccupied = Integer.parseInt(request.getParameter("HPOCC"));
            int HeatPointUnoccupied = Integer.parseInt(request.getParameter("HPUOCC"));
            int HeatSen = Integer.parseInt(request.getParameter("HES"));
            int CoolSen = Integer.parseInt(request.getParameter("CES"));
            int OldBTUpHDD = Integer.parseInt(request.getParameter("OBTUpHDD"));
            int OldOtherBTU = Integer.parseInt(request.getParameter("OBTU"));
            int NewBTUpHDD = Integer.parseInt(request.getParameter("NBTUpHDD"));
            int NewOtherBTU = Integer.parseInt(request.getParameter("NBTU"));            
            int HDDToDate = Integer.parseInt(request.getParameter("HDDTD"));
            int OldKWHpCDD = Integer.parseInt(request.getParameter("OKWHpCDD"));     
            int OldOtherKWH = Integer.parseInt(request.getParameter("OOKWH"));          
            int NewKWHpCDD = Integer.parseInt(request.getParameter("NKWHpCDD"));                              
            int NewOtherKWH = Integer.parseInt(request.getParameter("NOKWH"));
            int CDDtoDate = Integer.parseInt(request.getParameter("NCDDTD"));
            int BaseHeatEnergyAnnual = Integer.parseInt(request.getParameter("BHEA"));
            int BaseCoolingEnergyAnnual = Integer.parseInt(request.getParameter("BCEA"));
            String DDDate = request.getParameter("DDDATE");          
            int energyAdded = energyManager.addEnergy(client, schedule, site, zone, enduse, isWholeBuilding, isOverride, LightPowerOccupied, LightPowerUnoccupied, PercentMax, PercentMaxOrig, isOnWhenDark, OrigCoolingPointOccupied, OrigCoolingPointUnoccupied, CoolingPointOccupied, CoolingPointUnoccupied, OrigHeatPointOccupied, OrigHeatPointUnoccupied, HeatPointOccupied, HeatPointUnoccupied, CoolSen, HeatSen, OldBTUpHDD, OldKWHpCDD, OldOtherBTU, OldOtherKWH, CDDtoDate, CDDtoDate, NewBTUpHDD, NewOtherBTU, NewKWHpCDD, NewOtherKWH, BaseCoolingEnergyAnnual, BaseHeatEnergyAnnual, DDDate);
            if (energyAdded == -1) {
                request.setAttribute("result", "<font color='red'>Add Energy failed.  Please try again.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Energy information added successfully.</font>");
            }
            List sitesList = new ArrayList();
            List enduseList = new ArrayList();
            List zoneList = new ArrayList();
            List scheduleList = new ArrayList();
            sitesList = sitesFacade.findAll();
            zoneList = zonesFacade.findAll();
            enduseList = endusecategoryFacade.findAll();
            scheduleList = scheduleFacade.findAll();
            request.setAttribute("scheduleList", scheduleList);
            request.setAttribute("sitesList", sitesList);
            request.setAttribute("enduseList", enduseList);
            request.setAttribute("zoneList", zoneList);
            userPath = "/WEB-INF/view/setup_energy.jsp";
        } else if (userPath.equals("/add_building")) {
            String name = request.getParameter("bname");
            String address1 = request.getParameter("bstreet");
            String address2 = request.getParameter("bstreet2");
            String city = request.getParameter("bcity");
            String state = request.getParameter("bstate");
            String zipcode = request.getParameter("bzip");
            int nPeople = Integer.parseInt(request.getParameter("bnumocc"));
            String sSqft = request.getParameter("bsqft");
            int nSqFt = Integer.parseInt(sSqft);
            Client client = null;
            try {
                client = clientFacade.find(gClientId);
            } catch (Exception e) {
                gClientId = 1;
            }

            
            String siteAdded = siteManager.addSite(name, address1, address2, city, state, zipcode, nPeople, nSqFt, client);
            if (siteAdded.equals("false")) {
                request.setAttribute("result", "<font color='red'>Add building failed.  Please try again.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Building " + siteAdded + " added successfully.</font>");
            }
            userPath = "/WEB-INF/view/setup_building.jsp";
        } else if (userPath.equals("/add_user")) {

            String name = request.getParameter("user");
            String password = request.getParameter("password");
            String email = request.getParameter("email");
            String strIsAdmin = request.getParameter("isAdmin");
            Boolean isAdmin = false;
            if (strIsAdmin != null)
                isAdmin = (strIsAdmin.equalsIgnoreCase("on"));
            String strIsEmailAlert = request.getParameter("receiveEmailAlert");
            Boolean isEmailAlert = false;
            if (strIsEmailAlert != null)
                isEmailAlert = (strIsEmailAlert.equalsIgnoreCase("on"));
            String strIsEmailPolicy = request.getParameter("receiveEmailPolicy");
            Boolean isEmailPolicy = false;
            if (strIsEmailPolicy != null)
                isEmailPolicy = (strIsEmailPolicy.equalsIgnoreCase("on"));
            Client client = clientFacade.find(gClientId);
            
            String userAdded = userManager.addUser(name, password, email, isEmailAlert, isEmailPolicy, isAdmin, client);
                if (userAdded.equals("false")) {
                    request.setAttribute("result", "<font color='red'>Add user failed.  Please try again.</font>");
                } else {
                    request.setAttribute("result", "<font color='green'>User " + userAdded + " added successfully.</font>");
                }
//                request.setAttribute("users", usersFacade.findAll());
//                request.setAttribute("buttontext", "Add User");
            userPath = "/WEB-INF/view/setup_user.jsp";
        } else if (userPath.equals("/edit_user_update")) {
            String name = request.getParameter("user");
            String password = request.getParameter("password");
            String email = request.getParameter("email");
            String strIsAdmin = request.getParameter("isAdmin");
            Boolean isAdmin = false;
            if (strIsAdmin != null)
                 isAdmin = (strIsAdmin.equalsIgnoreCase("on"));
            String strIsEmailAlert = request.getParameter("receiveEmailAlert");
            Boolean isEmailAlert = false;
            if (strIsEmailAlert != null)
                isEmailAlert = (strIsEmailAlert.equalsIgnoreCase("on"));
            String strIsEmailPolicy = request.getParameter("receiveEmailPolicy");
            Boolean isEmailPolicy = false;
            if (strIsEmailPolicy != null)
                isEmailPolicy = (strIsEmailPolicy.equalsIgnoreCase("on"));
            int userID = Integer.parseInt(request.getParameter("userid"));  // jon-- not sure if this is right?
                //int idInt = Integer.parseInt(userID);
            Client client = clientFacade.find(gClientId);
            boolean userUpdated = userManager.updateUser(userID, name, password, email, isEmailAlert, isEmailPolicy, isAdmin, client);
                if (userUpdated) {
                    request.setAttribute("result", "<font color='green'>User " + name + " updated successfully.</font>");
                } else {
                    request.setAttribute("result", "<font color='red'>Add user failed.  Please try again.</font>");
                }
                request.setAttribute("users", usersFacade.findAll());
//                request.setAttribute("buttontext", "Add User");
            userPath = "/WEB-INF/view/edit_user.jsp";
        
        } else if (userPath.equals("/edit_building_update")) {
            int id = Integer.parseInt(request.getParameter("bid"));
            String name = request.getParameter("bname");
            String address1 = request.getParameter("bstreet");
            String address2 = request.getParameter("bstreet2");
            String city = request.getParameter("bcity");
            String state = request.getParameter("bstate");
            String zipcode = request.getParameter("bzip");
            int nPeople = Integer.parseInt(request.getParameter("bnumocc"));
            String sSqft = request.getParameter("bsqft");
            int nSqFt = Integer.parseInt(sSqft);
            Client client = null;
            try {
                client = clientFacade.find(gClientId);
            } catch (Exception e) {
                gClientId = 1;
            }
            
            boolean siteUpdated = siteManager.updateSite(id, name, address1, address2, city, state, zipcode, nPeople, nSqFt, client);
            if (siteUpdated) {
                request.setAttribute("result", "<font color='red'>Building " + name + " updated sucessfully.</font>");
            } else {
                request.setAttribute("result", "<font color='green'>Building update failed. Please try again.</font>");
            }
            request.setAttribute("buildings", sitesFacade.findAll());
            userPath = "/WEB-INF/view/edit_building.jsp";
       } else if (userPath.equals("/edit_zone_update")) {
            int id = Integer.parseInt(request.getParameter("zid"));
            String name = request.getParameter("zname");
            int parentSiteID = Integer.parseInt(request.getParameter("zbuilding"));
            String parentZoneID = request.getParameter("zparent");
            int nPeople = Integer.parseInt(request.getParameter("zpop"));
            String sSqft = request.getParameter("zsqft");
            int nSqFt = Integer.parseInt(sSqft);
            Client client = null;
            try {
                client = clientFacade.find(gClientId);
            } catch (Exception e) {
                gClientId = 1;
            }
            Sites parentSite = null;
            Zones parentZone = null;
            try {
                parentSite = sitesFacade.find(parentSiteID);
                parentZone = zonesFacade.find(Integer.parseInt(parentZoneID)); 
            } catch (Exception e) {
                //Do nothing
                parentZone = null;
            }          
            //Integer zoneID, String name, int nPeople, int sqFt, Sites parentSite, Zones parentZone)
            boolean zoneUpdated = zoneManager.updateZone(id, name, nPeople, nSqFt, parentSite, parentZone); 
            if (zoneUpdated) {
                request.setAttribute("result", "<font color='green'>Zone " + name + " updated sucessfully.</font>");
            } else {
                request.setAttribute("result", "<font color='red'>Zone update failed. Please try again.</font>");
            }
            request.setAttribute("zones", zonesFacade.findAll());
            userPath = "/WEB-INF/view/edit_zone.jsp";  
            
         } else if (userPath.equals("/edit_schedule_update")) {
            int id = Integer.parseInt(request.getParameter("scheduleid"));
            String name = request.getParameter("sname");
            int monHours = Integer.parseInt(request.getParameter("smon"));
            int tuesHours = Integer.parseInt(request.getParameter("stues"));
            int wedHours = Integer.parseInt(request.getParameter("swed"));
            int thHours = Integer.parseInt(request.getParameter("sth"));
            int friHours = Integer.parseInt(request.getParameter("sfri"));
            int satHours = Integer.parseInt(request.getParameter("ssat"));
            int sunHours = Integer.parseInt(request.getParameter("ssun"));
            String strIsOnWhenDark = request.getParameter("sIsOnWhenDark");
            Boolean isOnWhenDark = false;
            if (strIsOnWhenDark != null)
                 isOnWhenDark = (strIsOnWhenDark.equalsIgnoreCase("on"));        
            boolean scheduleUpdated = scheduleManager.updateSchedule(id, name, monHours, tuesHours, wedHours, thHours, friHours, satHours, sunHours, isOnWhenDark);
            if (scheduleUpdated) {
                request.setAttribute("result", "<font color='green'>Schedule " + name + " updated sucessfully.</font>");
            } else {
                request.setAttribute("result", "<font color='red'>Schedule update failed. Please try again.</font>");
            }
            request.setAttribute("scheduleList", scheduleFacade.findAll());
            userPath = "/WEB-INF/view/edit_schedule.jsp";  
        } else if (userPath.equals("/edit_energy_update")) {
            Client client = null;
            Schedule schedule = null;
            Sites site = null;
            Zones zone = null;
            Endusecategory enduse = null;
            String name = request.getParameter("bname");
            try {
                client = clientFacade.find(gClientId);
            } catch (Exception e) {
                gClientId = 1;
            }
            schedule = scheduleFacade.find(Integer.parseInt(request.getParameter("schedule")));
            site = sitesFacade.find(Integer.parseInt(request.getParameter("building")));
            zone = zonesFacade.find(Integer.parseInt(request.getParameter("zone")));
            enduse = endusecategoryFacade.find(Integer.parseInt(request.getParameter("enduse")));
            int energyID = Integer.parseInt(request.getParameter("energyID"));
            String strWholeBuilding = request.getParameter("isWB");
            Boolean isWholeBuilding = false;
            if (strWholeBuilding != null) {
                isWholeBuilding = (strWholeBuilding.equalsIgnoreCase("on"));
            }
            String strOverride = request.getParameter("isOR");
            Boolean isOverride = false;
            if (strOverride != null) {
                isOverride = (strOverride.equalsIgnoreCase("on"));
            }            
            int LightPowerOccupied = Integer.parseInt(request.getParameter("LPOCC"));
            int LightPowerUnoccupied = Integer.parseInt(request.getParameter("LPUOCC"));
            int PercentMax = Integer.parseInt(request.getParameter("PML"));
            int PercentMaxOrig = Integer.parseInt(request.getParameter("PMLO"));      
            String strOnWhenDark = request.getParameter("isOWD");
            Boolean isOnWhenDark = false;
            if (strOnWhenDark != null) {
                isOnWhenDark = (strOnWhenDark.equalsIgnoreCase("on"));
            }                
            int OrigCoolingPointOccupied = Integer.parseInt(request.getParameter("OCPOCC"));
            int OrigCoolingPointUnoccupied = Integer.parseInt(request.getParameter("OCPUOCC"));
            int CoolingPointOccupied = Integer.parseInt(request.getParameter("CPOCC"));
            int CoolingPointUnoccupied = Integer.parseInt(request.getParameter("CPUOCC"));
            int OrigHeatPointOccupied = Integer.parseInt(request.getParameter("OHPOCC"));
            int OrigHeatPointUnoccupied = Integer.parseInt(request.getParameter("OHPUOCC"));
            int HeatPointOccupied = Integer.parseInt(request.getParameter("HPOCC"));
            int HeatPointUnoccupied = Integer.parseInt(request.getParameter("HPUOCC"));
            int HeatSen = Integer.parseInt(request.getParameter("HES"));
            int CoolSen = Integer.parseInt(request.getParameter("CES"));
            int OldBTUpHDD = Integer.parseInt(request.getParameter("OBTUpHDD"));
            int OldOtherBTU = Integer.parseInt(request.getParameter("OBTU"));
            int NewBTUpHDD = Integer.parseInt(request.getParameter("NBTUpHDD"));
            int NewOtherBTU = Integer.parseInt(request.getParameter("NBTU"));            
            int HDDToDate = Integer.parseInt(request.getParameter("HDDTD"));
            int OldKWHpCDD = Integer.parseInt(request.getParameter("OKWHpCDD"));     
            int OldOtherKWH = Integer.parseInt(request.getParameter("OOKWH"));          
            int NewKWHpCDD = Integer.parseInt(request.getParameter("NKWHpCDD"));                              
            int NewOtherKWH = Integer.parseInt(request.getParameter("NOKWH"));
            int CDDtoDate = Integer.parseInt(request.getParameter("NCDDTD"));
            int BaseHeatEnergyAnnual = Integer.parseInt(request.getParameter("BHEA"));
            int BaseCoolingEnergyAnnual = Integer.parseInt(request.getParameter("BCEA"));
            String DDDate = request.getParameter("DDDATE");          
            boolean energyAdded = energyManager.updateEnergy(energyID, client, schedule, site, zone, enduse, isWholeBuilding, isOverride, LightPowerOccupied, LightPowerUnoccupied, PercentMax, PercentMaxOrig, isOnWhenDark, OrigCoolingPointOccupied, OrigCoolingPointUnoccupied, CoolingPointOccupied, CoolingPointUnoccupied, OrigHeatPointOccupied, OrigHeatPointUnoccupied, HeatPointOccupied, HeatPointUnoccupied, CoolSen, HeatSen, OldBTUpHDD, OldKWHpCDD, OldOtherBTU, OldOtherKWH, CDDtoDate, CDDtoDate, NewBTUpHDD, NewOtherBTU, NewKWHpCDD, NewOtherKWH, BaseCoolingEnergyAnnual, BaseHeatEnergyAnnual, DDDate);
            if (energyAdded) {
                request.setAttribute("result", "<font color='green'>Energy information updated successfully.</font>");
            } else {
                request.setAttribute("result", "<font color='red'>Update Energy failed.  Please try again.</font>");
            }
            List sitesList = new ArrayList();
            List enduseList = new ArrayList();
            List zoneList = new ArrayList();
            List scheduleList = new ArrayList();
            List energyList = new ArrayList();
            sitesList = sitesFacade.findAll();
            zoneList = zonesFacade.findAll();
            enduseList = endusecategoryFacade.findAll();
            scheduleList = scheduleFacade.findAll();
            energyList = energyFacade.findAll();
            request.setAttribute("scheduleList", scheduleList);
            request.setAttribute("sitesList", sitesList);
            request.setAttribute("enduseList", enduseList);
            request.setAttribute("zoneList", zoneList);
            request.setAttribute("energyList", energyList);
            userPath = "/WEB-INF/view/edit_energy.jsp";
        } else if (userPath.equals("/edit_energy_update")) {
            
        } else if (userPath.equals("/add_circuit")) {
            DoAddCircuit(request, response);
        }

        // use RequestDispatcher to forward request internally
        String url = userPath;
        //userPath = "index.jsp";
        try {
            request.getRequestDispatcher(url).forward(request, response);
        } catch (Exception ex) {
//            ex.printStackTrace();
        }

    }
}